(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    260363,       5154]
NotebookOptionsPosition[    251584,       5010]
NotebookOutlinePosition[    251958,       5026]
CellTagsIndexPosition[    251915,       5023]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["3-D Terrain Generation", "Title",
 CellChangeTimes->{{3.7317791298687153`*^9, 
  3.731779142970507*^9}},ExpressionUUID->"224853a0-4541-4eda-9a5b-\
f1c358e6cffc"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Taran",
  IgnoreSpellCheck->True],
 " ",
 StyleBox["Besant",
  IgnoreSpellCheck->True],
 " & Spencer Eanes"
}], "Chapter",
 CellChangeTimes->{{3.732448118155881*^9, 
  3.7324481293266993`*^9}},ExpressionUUID->"7267da42-e11f-4f77-a95a-\
daa8c637c05e"],

Cell["\<\
Modern computers make the task of procedurally generating realistic 3-D \
terrain feasible, and many different methods have been created to do this. \
Procedural generation techniques for graphics are commonly used in \
applications like video game graphics, movie graphics, and more. The goal of \
this project is to implement and compare different methods of procedurally \
generating 3-D terrain. Specifically, we will look at the midpoint method, \
and the \
\>", "Text",
 CellChangeTimes->{{3.731779179579766*^9, 3.7317793302310305`*^9}, {
  3.732448233311745*^9, 
  3.7324482466437254`*^9}},ExpressionUUID->"228ea285-b020-471f-9a7d-\
c6d246c021a6"],

Cell[CellGroupData[{

Cell["Helper Functions", "Subchapter",
 CellChangeTimes->{{3.7324482549153833`*^9, 
  3.7324482572632217`*^9}},ExpressionUUID->"a99f2c9c-77cc-4a2d-9621-\
67af8c3fd28f"],

Cell[CellGroupData[{

Cell["Make Array", "Section",
 CellChangeTimes->{{3.7317804075711117`*^9, 3.731780415211314*^9}, {
  3.73236847468015*^9, 
  3.7323684762947164`*^9}},ExpressionUUID->"60ae7b15-ffec-46a8-a1a6-\
c53779f3347a"],

Cell["\<\
This function takes a dimension, and creates a dim x dim dimension array of \
three-tuples with z value 0 and x and y values spaced evenly on x and y axis \
at intervals of 1.\
\>", "Text",
 CellChangeTimes->{{3.731780418367199*^9, 3.7317804419994135`*^9}, {
  3.7317804899834986`*^9, 3.731780497523425*^9}, {3.7317809825516567`*^9, 
  3.7317809927231913`*^9}, {3.7324483441942215`*^9, 
  3.732448358383893*^9}},ExpressionUUID->"b7fd5983-c530-4b85-8565-\
32b350250718"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeArr", "[", "dim_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"data", ",", "i", ",", "j", ",", 
      RowBox[{"ctr", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"data", " ", "=", " ", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"dim", "*", "dim"}], ",", "3"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "=", 
         RowBox[{"Mod", "[", 
          RowBox[{"ctr", ",", "dim"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "=", 
         RowBox[{"Floor", "[", 
          RowBox[{"ctr", "/", "dim"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"ctr", "++"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", 
         RowBox[{"dim", "*", "dim"}]}], "}"}]}], "\[IndentingNewLine]", "]"}],
      ";", "\[IndentingNewLine]", "data"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.731780271289055*^9, 3.7317803777324677`*^9}, {
  3.731780547212864*^9, 3.7317805608519936`*^9}, {3.731780631129213*^9, 
  3.731780683267487*^9}, {3.731780789884454*^9, 3.7317808703316307`*^9}, {
  3.7317809522615705`*^9, 3.731780957946776*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"148bc9b2-2d4a-4d3e-a6a8-fc5667cfa120"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", " ", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"data", " ", "=", 
  RowBox[{"makeArr", "[", "dim", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPointPlot3D", "[", "data", "]"}]}], "Input",
 CellChangeTimes->{{3.731780360972928*^9, 3.731780401775606*^9}, {
  3.731780523904051*^9, 3.7317805339436555`*^9}, {3.7317805717651625`*^9, 
  3.7317806250158463`*^9}, {3.731780884433156*^9, 3.7317808844953165`*^9}, {
  3.731780944485128*^9, 3.7317809669036818`*^9}, {3.731781365585758*^9, 
  3.7317813659958067`*^9}, {3.731781420169016*^9, 3.7317814202518687`*^9}, {
  3.7324483646567783`*^9, 3.732448382989169*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"ac4b6677-c113-4a0a-b2f1-0f4aa90781a7"],

Cell["\<\
So, what happens if we assign the points values randomly? 
This function takes arguments of the square input array and the dimension of \
the array. It runs a Do-loop and assigns the third value of the three-tuple \
to a random real in the range [0,1];
It returns the array once all modifications have been made.\
\>", "Text",
 CellChangeTimes->{{3.73178100460384*^9, 3.7317810172555847`*^9}, {
  3.732448400947652*^9, 
  3.732448488228277*^9}},ExpressionUUID->"9ea539f0-395d-4ba5-aa19-\
123d7614b230"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomZ", "[", 
   RowBox[{"arr_", ",", "dim_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"data", "=", "arr"}], ",", "j"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"data", "[", 
          RowBox[{"[", "j", "]"}], "]"}], "[", 
         RowBox[{"[", "3", "]"}], "]"}], "=", 
        RowBox[{"RandomReal", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", 
         RowBox[{"dim", "*", "dim"}]}], "}"}]}], "\[IndentingNewLine]", "]"}],
      ";", "\[IndentingNewLine]", "data"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7317810259712963`*^9, 3.7317811517362843`*^9}, {
  3.7317811985975895`*^9, 3.7317812148802977`*^9}, {3.731781310368078*^9, 
  3.731781326875574*^9}},
 CellLabel->
  "In[149]:=",ExpressionUUID->"2b48b734-0c91-4dec-9f0a-08db543f9b7b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Plot Heat Map", "Section",
 CellChangeTimes->{{3.7324161122691565`*^9, 
  3.7324161143745103`*^9}},ExpressionUUID->"742c578a-83c2-4fbd-9f18-\
3397419bdd2e"],

Cell["\<\
This function takes the input array, assuming it is an array of three-tuples \
and creates a 3d plot with a heat map surface to easier visualize comparative \
heights.\
\>", "Text",
 CellChangeTimes->{{3.732448507299301*^9, 3.7324485367350545`*^9}, {
   3.732448595185523*^9, 3.732448621772358*^9}, 
   3.732457858992851*^9},ExpressionUUID->"f2d35d65-a340-473e-bb11-\
f86fbbcd6b34"],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotHeatMap", "[", "arr_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"ListPlot3D", "[", 
     RowBox[{"arr", ",", 
      RowBox[{"Filling", "\[Rule]", "Bottom"}], ",", " ", 
      RowBox[{"ColorFunction", "\[Rule]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"ColorData", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<TemperatureMap\>\"", ",", "\"\<Reverse\>\""}], "}"}],
            ",", "#3"}], "]"}], "&"}], ")"}]}], ",", 
      RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
      RowBox[{"PlotRange", "\[Rule]", "Automatic"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7318491417320414`*^9, 3.731849169875128*^9}, {
  3.7324519559043736`*^9, 3.7324519588009834`*^9}, {3.7324578485324273`*^9, 
  3.7324578548668427`*^9}, {3.7324707503673925`*^9, 3.7324707529059696`*^9}},
 CellLabel->
  "In[150]:=",ExpressionUUID->"b0555e69-158f-4866-8b8f-14244ec7277d"],

Cell["\<\
Use randomZ function and plot it with plotHeatMap to see what the result \
looks like.\
\>", "Text",
 CellChangeTimes->{{3.732448555195746*^9, 
  3.732448572171567*^9}},ExpressionUUID->"72b9ebdc-7326-4f93-bef6-\
da9f550e4b7c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", " ", "=", " ", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"makeArr", "[", "dim", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"randomData", " ", "=", " ", 
  RowBox[{"randomZ", "[", 
   RowBox[{"data", ",", "dim"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"plotHeatMap", "[", "randomData", "]"}]}], "Input",
 CellChangeTimes->{{3.7317811562075505`*^9, 3.7317811613433766`*^9}, {
   3.7317813215456157`*^9, 3.731781355328207*^9}, {3.7317814074935493`*^9, 
   3.73178141084439*^9}, {3.7317814778017907`*^9, 3.7317814783600597`*^9}, 
   3.731781527017867*^9, {3.7317825877371826`*^9, 3.731782605414959*^9}, {
   3.731782645803935*^9, 3.73178264979731*^9}, {3.7317826931151686`*^9, 
   3.731782702949273*^9}, {3.7324161229510975`*^9, 3.732416129252164*^9}, {
   3.7324485781549783`*^9, 3.7324485843487606`*^9}, {3.732448638579077*^9, 
   3.732448756308055*^9}},
 CellLabel->
  "In[151]:=",ExpressionUUID->"ea723824-e8a6-4e79-8c1c-43f4ccb7301f"],

Cell["\<\
This does work, however it is not ideal, because points have no relation to \
their neighbors. For instance, a local maxima could be next to a local \
minima, which is not very realistic. On a larger scale, this issue becomes \
more obvious. It is clear that nearby points have no relation to their \
neighbors, and this creates a surface that is simply not useful (unless maybe \
you\[CloseCurlyQuote]re trying to model grass).\
\>", "Text",
 CellChangeTimes->{{3.7317827197542133`*^9, 3.731782764040639*^9}, {
   3.7317828390843306`*^9, 3.7317828513904753`*^9}, {3.7317829854117365`*^9, 
   3.7317830003705053`*^9}, {3.7317833133345027`*^9, 3.731783321409444*^9}, 
   3.7319454363650694`*^9, {3.732448780049741*^9, 
   3.73244878133944*^9}},ExpressionUUID->"1aceba19-54ed-467f-bf0e-\
a93f4cfc9e39"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data2", " ", "=", " ", 
   RowBox[{"makeArr", "[", "25", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data2", " ", "=", " ", 
   RowBox[{"randomZ", "[", 
    RowBox[{"data2", ",", "25"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPointPlot3D", "[", 
  RowBox[{"data2", ",", 
   RowBox[{"Filling", "\[Rule]", "Bottom"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.731782860191149*^9, 3.7317829741534843`*^9}, 
   3.7318483370028496`*^9, {3.731945445236291*^9, 3.73194550399848*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"5fd48cc1-3aed-4b4d-aaa6-2fc79fc782d3"],

Cell["\<\
Okay, so let\[CloseCurlyQuote]s implement some methods and see how much \
better they are.\
\>", "Text",
 CellChangeTimes->{{3.732448810462551*^9, 
  3.7324488180828123`*^9}},ExpressionUUID->"56754db9-0725-44d7-9daf-\
18f5c2683671"]
}, Closed]],

Cell[CellGroupData[{

Cell["Assign Array", "Section",
 CellChangeTimes->{{3.7319456933220882`*^9, 
  3.731945697782593*^9}},ExpressionUUID->"870215ed-6ecc-4627-b13d-\
d1a6f1c7b1d9"],

Cell["\<\
Given two arrays with the same number of elements, assign the values of one \
to the third value of the other (to make a plot-able structure).\
\>", "Text",
 CellChangeTimes->{{3.731945702544447*^9, 
  3.7319457522843013`*^9}},ExpressionUUID->"4b313817-256a-454b-973e-\
a2c62bf20556"],

Cell[BoxData[
 RowBox[{
  RowBox[{"assignArr", "[", 
   RowBox[{"threeTuples_", ",", "values_", ",", "dim_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"toDraw", "=", "threeTuples"}], ",", 
      RowBox[{"ctr", "=", "1"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"toDraw", "[", 
             RowBox[{"[", "ctr", "]"}], "]"}], "[", 
            RowBox[{"[", "3", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"values", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"ctr", "++"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", "dim"}], "}"}]}], "\[IndentingNewLine]",
         "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "dim"}], "}"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "toDraw"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7319457553920603`*^9, 3.731945833692353*^9}, {
  3.7319458732289205`*^9, 3.7319458904591436`*^9}},
 CellLabel->
  "In[158]:=",ExpressionUUID->"d963feb1-45c8-4a50-9b54-ec758efabcd4"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Main Methods", "Subchapter",
 CellChangeTimes->{{3.7324482781900167`*^9, 
  3.7324482799044013`*^9}},ExpressionUUID->"55544234-8e20-45c3-aafa-\
f0bb8235e8ae"],

Cell[CellGroupData[{

Cell["MidPoint Method", "Section",
 CellChangeTimes->{{3.7318483647713127`*^9, 
  3.731848367817142*^9}},ExpressionUUID->"b0225c5e-3e81-4c61-b035-\
1b6e2b8b29c4"],

Cell[TextData[{
 "This method sets the corners randomly, then sets the middles and the middle \
edge pieces to the average of their surrounding pieces, and then recursively \
applies this to all sub squares.\nNote that this will only work nicely if \
square dimensions are of the form ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "n"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "d26da5c2-0fae-4e37-9339-c53e1e8ba889"],
 "+1."
}], "Text",
 CellChangeTimes->{{3.7318483719562974`*^9, 
  3.731848461699559*^9}},ExpressionUUID->"4933274d-86a5-4777-be5b-\
ba518f76bd74"],

Cell["\<\
Next, we will set the midpoints of the edges to the averages of the two \
corners that they are between.\
\>", "Text",
 CellChangeTimes->{{3.7318492714220853`*^9, 
  3.7318492839953766`*^9}},ExpressionUUID->"c868e786-d8be-46d3-b1f3-\
b11cf2db9b4c"],

Cell[CellGroupData[{

Cell["Introduction", "Subsection",
 CellChangeTimes->{{3.7324703339343348`*^9, 
  3.7324703353180895`*^9}},ExpressionUUID->"0e29fea8-9df7-40f8-ab3d-\
37f3cdc048d5"],

Cell[TextData[{
 "This method sets the corners randomly, then sets the middles and the middle \
edge pieces to the average of their surrounding pieces, and then recursively \
applies this to all sub squares.\nNote that this will only work nicely if \
square dimensions are of the form ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "n"], TraditionalForm]],ExpressionUUID->
  "407fa907-8062-4a88-a85c-73ef2ad61dac"],
 "+1.\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
yOopWGeVQ/7K0fInqfyVQ4c50GGOB1RdTKiOgeoYD6jqYJ4mM0fLbxc733/l
URo5Wi4N+SuHDnOgwxwPqLqYUB0D1TEeUNXBPE1mjpbfLnbyVx6lkaPl0pC/
cugwBzrM8YCqiwnVMVAd4wFVHczTZOZo+e1i11f+Gg7r1OEQrzui0sjQcmnI
Xw+01mlQXVqH2bJHnxo9kL8G8td4QH1qME+TmaPlt4tdj/nr/Gr//P4a/jvR
iSMqjQwtl4b8lUOHOdBhjgdUXZSz1slQnasTcJcmM0fLH6a7rvPX6XRa9ysw
pZGj5dKQv3LIXwP5azyg6mJCdQxUx3hAVcfzsMiqBE3mqOP8dfzLLBkfc0Ej
3iuNT/FuHyelkWOxNBKO0ez50GppVKbDHOgwxwOqLiZUx0B1jAdUdTwPi6xK
2FyTOae//PVu/Z0cvmJ79+ufv338kzAJvf1k63/88+pvzMwN9O6vf73O/ej3
X+Z+8vnz3E/634e8Y3S1D02WRmU6zIEOczygrX5kPITqGKiO8YCqjudhkVUJ
8teov/x1eLUP/z5el6iUvwp//5U2UCnn0lh7oIOhNCoMtHzGljpGdwfaDh3m
QIc5HlB1MaE6BqpjPKCq43lYZFXCFvNXqT6z2beLaf46vPBf2liam/+CBw5U
xAbz177QMQoZ6CGeZcn6++bh2v7IOJ8zUVu185FxLfGANlkXj6I6BqpjPKCq
43lYZHX0VAucGtmHrMP0DIuspvlrP3wF9vXHuiOGfZIGvtr5A+XbZv7alzhG
gQPV9yxL1t83D6fDzKHDdHWiDNVxlHhAG64OLlhklW+bTWaxw9Tq28VF/mpq
aW7aS50wUKZtlsYg8xiFD1TZsyxZj3j+3XQuOsxUtzrMgsfo/d9N1sXA1YkS
tlIdyxIPaMPVwQWLrPJttsksc5hafbu4yF/704u/6urcqDM2q7FXGhnCz9ic
YxQ1UE0NLlnPff728lfUW+tg7qnkr5pcnShhK/mr4DF6/3fD1cEFi6zybbnJ
LHCYvF28iT1jY1/q5IGSbbk0BsnHKHagahpcsl568fb8QGuNeLlcPPB9dar4
Prwr8jpkv2LtL1nfuzpRhqsT0cfo/d9Nfmpwk0VW+TbeZOYeJm8XbxLO2KiX
OmegNBsvjUHaMUoYqI52lqyX641+Lg9Ufkb36iK8sbx7Xj22Loofo7mBGuHq
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
OP5Nlq8/pv/ldEa9fvt71fw18eufv338izCBL/XUZOt//PP6b8zMDPTur3/d
+Ms0g99/mfvJ589zP9nEPmQdpot9aLI0KtNhRr2jXmjwI+NZBnoKqmPv6sQj
BuIZWWSVo7W3i/wj1ezbxTF/nXbsuIenE2ntM2qN7792N70NtL6xNCoYSqPG
SG9n7JyEw3T7fGi1NCrbeIcZe9pcaO0j44kGegobr469qxMPGoh8Flnl22z+
KnKkmn27OMeuH19fX4cQsfKuZv5phogEIX/luJe/boptDPYNl0ZlW+4w0z77
ppr6yHiugZ7Clqtj7+rE4wYin0VWR8+2wKmRfcg5Uu0vsnr7uPnx5bB7h/e0
rz+ui2WdEeWvFPJXrzbbYQa+qS4/iQ6zb5utjr2rEw8diHwWWZWw0SYz4Ujd
OB9afbs4fRH8+u37l9MLfjjEX759f131vVr+ytFUaVwLbwnez4dWS6Oy1T+S
3u4+3VSHmfm+etZZh3l46dTF1GbzV35p7LurjpoDkc8iqxI0me9i+8xm3y6G
w/rydq4er1SsuS53rzTyNF4a3eSvBpes5z5/e/krKnwtn1eddZjy14UNVsfe
1Ym5UVTHU7HIqgRN5rtu8ld9SiNH46XRTf5qcMl66cXb8wOtNeLlcvGE/FV8
H96VfR2KvHTt1cXA1YkiI7o6kTiK/PVULLIqQZP5Tv5KpjRyNF4aXeWvNpas
lzuibwezmbpI6DDnnqrxuojXdIfp6sQKI7o6sbjJ81yd4IJFViVoMt/JX8mU
Ro7GS6Ob/NXOkvVyR7S5/HVTSqU3Xxfxms9frk5kj+jqRKqmq4OH02TmaP/t
Qv5KpjRyNF4a/eSvZpaslzuizXWYN8lfJ013mK5OFBlRdaRqujp4OE1mjvbf
LuSvytI+d6gsIX+1qZ0l6+UOjg6zBB2mqxOFRlQdqZquDh5O/srR/tuF/JVM
aeRovDT6+f6rmSXr5Y6oDrMEHaarE4VGVB2pmq4OHk6TmaP9twv5K5nSyNF4
aXSTv+rL/A2aiIPUdl102WGmHNCG68LViSIjqo5U8hflWWT1LLpZZ1Wf/JWj
8U9S+SuZ/DXossNMOaDqYkJ1DFTHeEBVB/M0mTkaf7vY+f4rg9LI0XhpyF/J
dJgDHeZ4QNXFhOoYqI7xgKoO5mkyczT+drGTvzIojRyNl4b8lUyHOdBhjgdU
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
WzH565y2rv/x4RfQ5C8AgPa5hxvEOuavW+sPh/x1/LrqY/46Z6u9/AUAsGHu
4QYJLrLP+3+fyV++/wIAwD3cIM24zvDWtYtTYvr4+18fvym7lb/GVYvnn77I
XwAA3XEPN8gxnslXa3eHm2aMJiX24fEft9p9KIFjHJO/AAA64x5uAAAAdbiH
GwAAQB3u4QYAAFCHe7gBAADU4R5uAAAANbmHGwAAAAAAAAAAAAAAAAAAAADA
EznfYPPi5jArGe45M73bZ3EfZrTmLWg+3Ffn1p+fKO7ttjzuqwMAAM9njCpf
f5z+NsLprx6sFsFON+R8+fL9mCDWy1/nv7g3/N+5P4xe3PnGpOsNMU7tj9UH
AgAA1vD+5wwGf68Vjk5B7zTQakPcHnfmD6OXH+g4r3UHOh6sQ5b0dyUAAOA5
Hb8e+nqOX8PfEH//8mgNveavtb9oO79u/q4fAAA8o/NSvfM3X6/ffxwj2ORP
h5cftG7+WjsWTX4FbN1M9J6U5S8AAHhC5/x1uifGsArxZ0/5awhHdcYaf7tt
nbHOmUv+AgAa4R5uydzDbcuGM3n8Cuwtf/Wx/rBm+BoMX1EVf9rhreC48lD+
AgDa4B5upbiH29bcuv/Guhm8Tv6qH77Wi67De84NVd4TAACuuYdbsYHcw21j
bly7WHPx4b5K/qofvt4GrVKkagcAeDT3cCvFPdw26MNK19XC17kwP1httV6d
r4qG1ZuVv41SOwDAY7mHWz73cAMAAEK4h1tB7uEGAAAscw+3gtzDDQAAWOAe
bqW4hxsAALDMPdyKDuoebgAAwBL3cEvmHm4AAAAAAAAAAAAAAAAAAAAAAAAA
AGzcpzeP3hEAAICefaKcRx9MAACgaY+OLL159PEEAICu7P7+9jr9s92//vnb
9d/yHvz+y9xPPn+e+8k//jn3k4WB/vrX69yP7u3Do/NKbx59egIAQFdO+evL
j92uj4EenVd6s+rBAgCArZG/WLDqwQIAgK3pO3+tOtbBj68vr99/7ir495eX
P779XP8wyV8AQIhaF4O34tHHk3rkrxzyFwCwQbVCybY8+qhSifyVQ/4CADao
ViLZlhbuZZe1D1Wa1Q7IXznkLwBgg2olkm156h6y2kAdkL9yyF8AwAbVSiQb
8uw9pPwVTv5Kttv9/PbHy5d/357Rk9ZOzRcQAHhSVTuuas3qYmtXVqXwVbGH
lL/CyV/JVspfN5/t8+eXu48pQv4CAO6SvzLJX3SjnfhQNiu9vMhfAEAr5K9M
8teW+f4reYiQKFQ8fwVO7dOVwIHkLwDgLvkrk/y1ZfLX9VYLG8bmmoL5K3Do
64dFvSDyFwBw1xoNw0LXdLEQKFzkDshf6eSvcAmxKKGrTxgobZTMuHF38/BH
Dq4Lv8i8YncvfLiEfQMAtmaNhmEhLtXJX9Ucgt7CC1gyfO3krxZFxaKcxj58
oGrxYXmgm88Qu2PTwk+eV/gmCTNafoblBwMA27RGw7AQlzr7/kv+2rhSsehu
9QUOlDlKTtYIGSv28efCT5tX2X1bGCjtBQQAtqlyw9BZ/tovvoBF09fu0Hsf
OvBDH15hUltzSjdvvv6I3HCL+StkoOsnid1kl5G/ij9+bsO0FxAA2Ky1G4aL
pw3JXwmjXD/Jy++/LDw4ZSa3n6re91+x+Suqb/yw2xv7/msIX6/ffw4v85eY
CFYwFi0fo5CB8kcJP2HSxordaijVhLFid6zIqxf1AgIAm7Vqw3D9zPXy18vL
woOXdzX8pWgzfyV3j+Nubyx//fj6Msx3dJj+y+u3v4OmL39FjVVtq/WG+CR/
AQB50hqGwJ7k+mEt5K+7Oxn+gjSYv+70jiGT2lL+Gpaqvn35tRu//3oJXbxa
LX+FyB8l7WHhY1XbKnaIIq9e+AsIAGxZbMNQpKWJyl8h/U9y/spst+SvZzcE
rkPaOjp+83X49/G/HBJZ0OZFv5a6e2jWHiV8Z9LGWm+ThA2LzCj5BQQANiuq
YYhtThYeFpK/wgeSv8Knc39SW8xfx2/B3lYhFs5f++6+/0oeK23HkudV8MF3
dzL2BQQAOpB2D7eohiG2Obn74IX8FTVWWv4KGeJ6UlPy17Mb1h++nL8Ce8tf
ra0/7P73v9abV/iDk4dIeAEBgGeXfA+3VbugwMevnb/mppYwo8uXXf56frfu
vxH6J5U3m78ChwvcJH+gqHnNPThniJvPsPxgAOCpJd/DLbxhSOiCEjZJ23Ah
fxUc5dpy/qosfDrL+7m1/HV97SJw8eE+OH/tu/v7X2ljXT9gF3aaZc7r5jMk
DBS7nyFTAwCeUc493MIbhpAW6OJJEjZJ2/Bm/loeJXyI692bvvKBj6wjf0b7
7eWv/ce1u+Hha7/t/HV3uOVNzqV6d5T8ee3f3iICHxz75HMbBm4FADydnHu4
BTYMIf3P9ZPEPj5huLdX4IPAgWJHufXKy1+bFp6/9pl/6aBQ0IvaNmRSN0e8
M5ePkkeJ2tWov12eLO0FBACeTs493MIbhuX+5+aT3H3kzV90Ch/o01X+Ctyx
5BldvfL18pff/2pQVP4aRB2L5IHSRqlzMqflr5t7GLiT4X+7PFO1dwMA4LFy
7uEW3jAk9PbLD7sZvoZ+LHaswOCWP6PrVz7wkfn8/a8GJeSvlgeqdjLv3961
Au8zmUn+AgCKS76HW3jDkJBW5h4wl7yS81fsjkVNauE1kb82Tv5KVjN/VVPz
BQQAHiv5Hm5RDUNsb3/905eXl+XwJX/NCb+Gnzydgfy1WdVO5sp8/wUArCHt
Hm5RDUNsWrn+74H5K3askAfPzS5hk7M289cgdi5n8lc4338ls/4QANim2IYh
Nq1c/PcG89fcM4S8ei3nr2TyVzj5K1nN/FXtlK75AgIATyqtYUhLK/uY/HVz
lLkRhw2XH79GOyR/bZz8lSwwf90t6pBdjTqlc0as+QICAE+qcsMQlb9u7uHN
nZxuntykJZC/Nk7+yvHj652V0kFBKGBvw0/pzBErv4AAwDOq3DAk5K8QF8+Q
0KGlae3vLxchf4WTv3Is5K/Ab7QD9zbklC4yYn/vBgBAcZUbhjr56+AwUFSH
lqzaC1jt+y/CyV855C8AYIPmGobkKDRsO/ejm/krbZTpcOfnmeav4adl26GL
fbb+cOM2mL/uXj8Jv7pyN3+FB6Llt5Hw/JU5YrV3AwDgea3RMCzlr99/KZi8
rse9zl/7q3swFh2xXv6qFovkr3AVYtHhHKsz0F7+ih9xODpRLyAAsHE1G4a1
e8i5/LUe+Wvj5K+181dIILp+5stni8lfUSPKXwBArKiG4W5bcqdzC+shk0cJ
zF/TVi1zRtfPsDy1HPJXg6Z/9Pzo1z9/e7ny179er//j4Pdf5n7y+fPcT+YH
yh7u4mQ+/eQf/yw7StiUp/++W5u3ny5wD98elj7i5FhUezcAAJ5XeMNwtye5
+1Qh+StnlNj8lT+jqBcwk/zVoA1+/1XQ3fvPz+1Y7E4mnNLB7zm+/wIA4oQ3
DEvJJKwvkr9yyF8Nkr9yhOev/Uy1Bm6bdkqHjCh/AQCxohqG0KDyuPWHb//4
+e2Ply//LvnnVgOf4e6IyeSvBslfOeQvAGCDYhuGtKgS20OmjhKdv5LHmts8
ZMQ068Wiix5S/gonf+WIyl/7jN1LPqUD39ny9xAA2I7YhiEtrchf+eSvBslf
OeQvAGCDLhqG99t5zd+mbDmqzG11w69/lh1l+LWvW073cFtnRhcPnr9t3cx9
5F5K3Msu/w57F/sgf4XZ4N9fLig2f+0nexi1Vc4lhagRK7+AAMAzmmsYFv6C
z3Jamdno5/F/3nrIEEmjvA83fP8VKGesyB3L8NZDrsD3X4nkrxwJ+StNtVO6
8gsIADyjuYZhuV+PjyrR+StplPfhovJXzljy15bJXznkLwBggwrmr+UO//g/
JfJX2KZl8lfChhFDxpK/2iN/5aiWvw4+f365OOnXGEX+AgDuSstfu1uBZbnD
P/5PZP6KH+V9uNj8lTyW/EU3Oo4PLy/yFwDQhOT8tfsYPe52+Mf/ic9fkaO8
D5eQv9LGkr+2zPdfOWp+/zXNX+tNUP4CAO6qlb9OVs5fk92Wv47STgn5K9zG
89enKyEPPp+fh0yUs3tRAWfIX2k7nPyChO8eALAdcw1DYHu/euiIGWW62y+/
/zI35SJjnV28gOEbRpO/2hMbi5ITRJ2BcrLJ8obXj9nF5K/Y4cKfoexwCTsG
AGzNXMMQ1d6H5oGk77/SLLR2u6RkMTfQdVe5FvmrPaX+pHgjAwU+eHmIm9sm
TzxtuPBnKDtcwuwAgK2ZaxgyO/nYjBCTKoLELm1KntHFC1h8Iu/kr/YExqKc
lr7mQGkpI2SU5IlnTiphw4LD3Z0aALBBcw1DTie/8Pjru5DlR4abz9Nh/opX
9hXo2yngvMQGzw3mr5AhrjdP3qu04cI3LDVc+AsIAGzcXMOQ08kvPL7N/BXS
XM3t8MWGkQkphu+/1jHcreUw5W9fV8lfmS19zYFCHpY2SvKOrTrc9YjJG4a/
gADAxs01DMud/HI3stD5t5a/wlusuR2+2CQmHkWSv9bx8/vrcBf0H/JXwMPS
Rknet6cYLuoFBAA2bq5hmOvkE3qSqdj8FTLEzeeZ5q+5DaO6rLkdvnh8TDyK
JH+tTP66+7DwIT6VCETPMlz4CwgAMNcw3OzkE9qSi/8Ynr/CR7n5POf8dXff
Agea2+GLx8fEo0jy18rWyF8h59jc+Vl/oJCHpY2SvG9rb1hquPAXEADYuLmG
4WYnH9uWXP/3wPwVNdDN5zkMFL5vIQPN7fDFg2PiUST5a2W+/wp5WNooyTuW
Nlz45qsON/c6AwDdSLiH21zDcN3JJ3Qm1z+qk7/ubpIwnbkdvnhwTDyKJH+t
TP4KeVjaKKV2KeEZlp+k7HDhuwQAPLvke7jNNQzXnXxCZzL3gOXIEDvQdPPA
HcscZWHEmHgUSf5amfyV9rCQIdJmnTxc+JOUHS52rwCA55V8D7e5huG6kw9p
Sy6eZOExC5EhdqDztkV27O4oFwLnVYD8tbKV8te+r7//lTZK2qyLTGowfPMe
smHOcAmzAwCeXan8tfywwObk7iNvRoY1Brp4fMIocxnn4sHRqSqc/LWO43wv
vX77O2j628xfdwcKefwu5o/05bx0g+nK57sbVngBAYBurJS/rh8Z0p8EPn4a
GcJHOQ+UsGMJW81lnIsHx4aqCPJXewJj0T47QdQZKHavop7/ukai/kh67HBT
aad0wnBpuwcAPLVnzF+fJi1ZwkAJO5aw1VzGuXhwSrAKJH+1JzwWDZbPyYcP
lLZv4S7Oz9j8lT5urVN67RcQAGhQ2fw17eRjA0vUJjkD7YK/NVue+/Imcxln
biLlyV/tiY1FjQ+0XC/5Ls7Pz5/lLwDg6a2Xv64ffDfjhDx+2GQ6UOBWn66+
mYrat9jpzGWci8fHxKNI8ld75K8chzer4a5Ba5O/AID1PFf+mosMUQNdPEPg
voUMdPOlWB4uJh5Fkr9Y2d16YZkXEAC2I/kebssNw3UnHx5Y7j54ITIsb3gx
1vWTBO7ewn7eeIVnhEyqDPmrPb7/yuH7LwBgg5YbhrlOPjDazOWgkMgwt+31
cDef55A/A3cy0NwOh08tl/zVHvkrh/wFAGzQcsOQ2clfJ6DpX+EJiQwhGerm
85xvrSZ/Rc9U/gomf+WQvwCADaqWv4b/Epu/Qtx8numtrYv0QnM7LH9tmfyV
Izl/xe5h5t//SthE/gIA5qyav/ZX2ech+Stwk+WfzpG/tkz+ypGWvxJ2MuGU
Tnsp5C8A4K7A/HW3ww9s+1vIX1Fzuate/oqX8GI+td3u57c/PtyD5su/130R
5K8c8hcAsEGt5a9SOsxfvv+6Z8hfh5Z+mP7P76+BdwFNH1H+ypCQvz7dcner
2FM6bZTrDQOHAwA2Rf663u2ogeSvdlzkr1NmWfcrsLVj0WFGdQYayF8Jo5yP
0fWGgcMBAJuSmb/OWwW2/df5K3mUZHPPkzaK/NWOi/x1/FvkK2cW+StHbP66
GYtCdjXqlI4dRf4CAKLk5K+F3DE3XEL+Sko3xz78y7+DH544yuWGsdvGkb/u
ufz9r/VnMXzF9u7XP3+7+Cvof/3r9WXG77/M/eTz57mfzA9UYsSLk/n0k3/8
s+woqbNeiEWTvZ08T/geTh4ZPcrJbzObr3ruAQBParlhWG7vF3LH3HCHzicy
dchfb+Sve87ffx3+ffzlr0r568bXUuWOuu+/xhfzbjJaOPNvntI3X+6oUS6O
0d73XwDwnCrfw225YVjoC8M6k4/eeshwKaMcxeWv1FFubBu+YTT5655p/trt
fnx53P0Pyx11+ev4Yi5nouvqu3yGsPwVO8rFMdrLXwDwnCrfw225YVjoC8M6
k49K5K/7oxzl5q+wUW5sGzpkAvnrnmn+2g9fgX39se6I8lcG+QsAaEHle7gt
NwxzTWFwZ/JRZP5KHOXUEYXnr4xRbmweuFWKW/mr1Gkw7SG7yV8PvP9huaMu
fy3dEGOubC+eISR/JYxycYyud7XIqwQArK3yPdyWG4abHWFMZ/JRTP5KH+XU
EQXmr7xRbjxDyCaJ5K97LvLX/tThr1o+8lcO+QsAaEHle7hdNAzHERdurRZw
i7DZza7ve3YaaHf6W10rjnI0cw+3EqNcbDJ/D7fZfShzL7vs++x92IfnzF/1
+fvLOdbIXzefIeSSQv4o109yd2oAQAsq38NtoWG4+fVKTnNys4csPsr+7TW8
u/Asc5SbT3L38cnC7+GW8z3L3EDcVCEWjcfn1nfHxceqczInzCikVG/ucNRY
yaPMPUPCiwMA1Ff5Hm4LDYP8FdJBVeu45K8G1ctftxQfq87JXHNGNcfay18A
8Jwq38NtoWG4blFCAstC4xGYvzJH2Yflr/xRbj7P8oNzyF8N8v1XgoUZ3ZQ+
xFmVV28vfwHAc6p8D7eFhuGiRQkPLHO9R0j+yh9lH5C/ioxy9wUsS/7appoJ
os7JvDCja1lDnMlfAMC8yvdwW2gYds+Zv4bm6uX3X+amvIu819nNUUJewLLk
rwb5/ivBzRntZ07mUoN+/vyy0jNPVXs3AACeV1TDkBlY6qw/HJqrQ2Sdm8Uw
YuYoc3u7/OAc1WKR/BWuzfwVew7PbZiwSchW50euGoUuvLzIXwBAE9ZoGBZ6
m+suqHgjdDd/lSV/bVlC/ooNLFH56/rJ05JRyOPTxrp+ZNQ7QMKkBtN3npBt
0wZK2zcAYFPWaBjkryIuX6Y1f1/mw7jyV7Co/JUWWMLz1/Lzh5yf4Q9OHitt
x+6OeHfz4Z0nZMOcgWL3CgDYoOWGIa2rj8pfyaPcHPdsvfx1sf8XL+C9eLS6
AhOUv4KF56/lrn6hXR+Pa+/5a6Xh7j5D2YGidgkA2KbKDcPN779yssPcU3WY
v2p9/7VBx7/y8GZ665u72slfIc9fKj7kjJW2e2XntbBV2YEWHgkAbNbaDcPF
0z4kf5Wd2sVAFy/gvXiUwfrDdRzn+5ahYv/cQ2D+Cunq587ShaNfaoi5J1lj
Ogkbrjpc2dcw8GEAwJat2jBcP3NU/gppe+ae6py/is/uYqCLPbwXjzLIX+sb
/vpD+F88l79ix0rYNm249Tb5JH8BABnSGobAhuT6YYH5K7z5mXuqw0AhOxk+
0NyIF5vci0cZ4vNX4IwuJ/jM+WsMUEmLCfdPm7/Cn3/5HAh5ZOZYCdvW2STz
MIW/gADAxsU2DFFtydzDlrNDVP9z83kyd29hk+sRA6dWQEz+ip3Uhwk+bf46
p6fJK5bw+1yF1x+GnGb3z7etfv8V/vhP8hcA8AyiGoaC/UxydrgY5eIZwvct
YTohI95NUemC81favN4n+Lz56/ibXK/f/n5/NY431giey27347B91Nwb+f4r
c4i5J1ljOgkbJgyXtodpWyW8gABAH9Lu4RbVMBTvZ9Kyw3Sg6eZl9+3mVnv5
q2HnO2mcnYoi6P6ECeFrL3/Fj7XGJje3XW+TmzsZ9QICAB1IvodbeMOQ0JwE
Pj42O1zv6nqbfHq2/JU8rw/nUk/5K2AuaeFr31L+Chwlaj8zZxS74RqvXtQm
OQPFvoAAQE+i7iEQ3jAkNCfNbpK81T4mf4W8/gvkr1hjjPr4+193L0Qkh699
S3//K2eIuWdYYzpFdiz2GcK3KjvQ8qQAgHbUvIdbkR5m7kliNwl/fM4oyQO9
vbzyV7vGMPUm5Fvg6cLdqA33jeWvu6PE7mTOjMK3CqmU5Ffv7jOUHShqlwCA
RlS+h1tgwxDSllw/SezjowZ6e7kiQkfOQO8vr/zFm/D8tU8NLFH5a26gwOkk
bJUw1nWxpA0UNejwly9CNswZKO1lBwAeq/I93MIbhuW25OaT3H3k7qqfjB0l
KnpkTud6RPlr46Ly1yD8QIxDxOevZFE7luO68NP2MHwnp395MGTbtIGqvYAA
QEGV7+EW3jCEtPQXT7L8sOvskDBKVADJnM7NERcmFXgI5lxOTP5qT0L+ih5i
XvGxAs+QfGtPZG6gtQet9gICAAVVvodbeMOQ0NjPPWC5I4oaIiqDJMzo1uu8
NFbBBu9yVvJXe+rlr46+/7qe0UoD3RxrvVdvL38BwHOqfA+3qIYhtqu//ul0
FdC1hFHmnuow0PK+JUzn5ogXjy/Y4F1Oyd//2qSFo198rPCTJEfNGdUcay9/
AcDTqnkPt6iGIbaxv/7vIfnr7kAfX6vbDgPN7UP4jG6+CBcDXWxSsMG7nJL8
1R7ffyWoOaOaY+3lLwAgQGzDENvVX/z3wPw1N9b188891Tl/Xe9DyKQWHnwx
0MWGBRu8yykF56+bMwo/yvJXOPkrQc0Z1RxrL38BAAHSGobYlv4sKn+FmHuq
af4q62KgNvPXIO0wyV/hKuSvmgNVjg8/vkb/ccM01U5p+QsAuKtyw9BC/spM
Rk+UvxLHlb+CyV855C8AYIPkr8wR6+WvMJmD7uWvGPJXDvkLANigpvJXQR3m
r1rffxFO/sohfwEAG7RGw7CQApLzV8igpZ4qaqD+8pfvv8JtMH+FF9rd81P+
AgA2qHb++v2X/LZtbtCpobVLe6qogeSvLVs7Fu12P+sMNJC/skbZ/ZS/AIC7
Vm0YaiaIiyfpIH9djlsrFj1v/rru54c/pRfyh/DS9J2/yLTqwQIAnlTNhqHe
Yq3dz29/rNh1T1V7AeWvu45/hfzrj+l/OZ1yr9/+XjV/Tfz6528XfwT9r3/d
+Mvog99/mfvJ589zP5kfqMSItXLJhqx04gEAz6tmtyB/5ZC/7jrmr9OeH6cw
fNO69vdTM89/7zvecG/f4YZ9d5ypVijZkJVOPADgedXsFuSvHPLXXefY9ePr
6+vpBFh7LvIXy1Y68QCA51WzW2gnfyW0pnNPVe0FlL/uejvBfnw57P9hFl9/
XK9IXGdE+Ysb1jvxAIDn9egOpTfrHalq93B74vx1vNvG67fvX063Xjlk8C/f
vr+ueoe9zvLXbhLB5h6Q+4pNLNwkp7C3U3plx9qp8FYAAJRV+R5uj8goPVvj
GA3kr7uG7z1f3gLR8cuvNW9+uO8xf52/O46SNvEu89eT1g4AbFnle7g9Oq/0
Zv7Odf/4Z5172RW54Z4eMkzmktqI1l7+ypGUv1IOqPwFAE+o8j3cHp1XerNC
7/jGNfz2yF+DlBnJXwBAG+rfw+3RkaUfq7SOZ/JXe+SvQcqM5C8AoA3u4VZk
xOUeMuVVmtF4DxlP/oogfw1SZtR87aQcULUDAE/IPdyKjCh/pZK/6ln9YNbS
34x2zn8A2Az3cCsyovyVSv6K4PuvQcqMmq+dlAOqdgCAABvsIQtOUw+5ZRus
nZtSZqR2AICt2mAPWXCaesgt22Dt3JQyI7UDAGzVBnvIgtPUQ27ZBmvnppQZ
qR0AYKs22EMWnKYecss2WDs3pcxI7QAAJFmlX1rZRqa50wcGOEWbd1H3GpW/
Bikzkr8AgK3aYA9ZcJp6yJ4MWSz8dqMbrJ2bUmakdgCArdpgD1lwmnrIngxn
TvhXYBusnZtSZqR2AICt0kMOUmakh+zLce4vr9/+9v1X3DYpM1I7AMBW6SEH
KTPSQ3Zh+itgUX/rXO0MUmakdgCArdJDDlJmpIfsy+F4fjlksK8/Qh+vdk5S
ZqR2AIBn5h5uH+khRykHdNs95GkJYmg5qJ1ByozUDgDQC/dw00OepRzQbfeQ
P7+/hk9f7QxSZqR2AIBeuIebHvIs5YBuuIccrl2oHbWzUzsAQDD3cNNDnqUc
0I31kKd6eV+6G144e7XzJmVGagcAeHLu4TahhxylHFA9ZDC1M0iZkdoBAHrh
Hm56yLOUA6qHDKZ2BikzUjsAQEfcw00POUg5oHrIYGpnkDIjtQMAdMQ93PSQ
g5QDqocMpnYGKTNSOwBAL9zDTQ95lnJA9ZC1rHKePEJ/M9o5/wGARe7h9pH8
NUo5oPJXMLUzSJmR2gEAtkoPOUiZkR5y29TOIGVGagcA2Co95CBlRnrIbVM7
g5QZqR0AYKv0kIOUGekht03tDFJmpHYAgK3SQw5SZqSH3Da1M0iZkdoBAEiy
Sr/0CP3NaKcPXJn8NUiZkfwFAGyVHnKQMiM95LapnRxqBwDYJj3kIGVGesht
y6yd+8+/ezvgbddOmofXTsHDNP5D7QAAAeSvQcqMGughl6UcUD1kMPkrx8Nr
p+BhGv+hdgCAAPLXIGVGDfSQy1IOqB4y2OmUnvj1z99ePvrrX68vM37/Ze4n
nz/P/WR+oLVG/Mc/yw5Rah8GpV6Hgi+a2gEA7pG/Bikzkr+2ba52yh31n8sD
lZ/RW+2sPdBB/dq5mmwpvv8CACLIX4OUGclf2yZ/5ZC/AIBtkr9yyF9bJn/l
kL8AgG1yD4EcD89fBQ/T+A89ZDD5K4f8BQBsk/yVQ/7aMvkrh/wFAGzTRu/h
ljGQe7gxqBeL5K8ctWKR/AUAhHANP8fDe8hyA7iGH03+yvHw2ilO7QAAIeSv
HA/vIcsNIH9Fk79WGqjcWX0ifwEALZG/cshfWyZ/rTRQubP66PC6HV69w2u4
+qTUDgAQQP7KIX9BceXO6qNq+QsAIIT8lUP+2jLff600ULmz+ig2f326Ejop
tQMABNBD5nh4/ipODxlO7aw0UNnSCc9f18krKoWpHQAghB4yh/y1ZQmndNp3
K83WTvpXRe3lr+XwFTI7tQMAhJC/VhqobA8pfzUo6pTOauzbq53cr4rkLwBg
q+SvlQZ6SA9ZYFJ6yGDhp3Rmb99a7RSIKo3VTsiM7h8mtQMA8Dj1e0hynDLO
QUTMkb/krw+7LX8BAAF8/7XSQPV7yKnYfvh9tzfZQw6H8vWP1zXyV35v31Tt
lIkqFX9JM0SZSW2ydgCAWPLXSgM9Kn8ld4/jbm+yh/z5/fU468Pc5a/t5a/w
Gd2Z1CZrBwCI5R5uadO5O9BD8ldmA7nfZA85rDw8HMddq/mrmm3mr73vvwCA
itzDLW06dweSv57Fj68vL19/HF/lFfJXaFsfdsqt7W7tlJpO1T8S4fe/AICW
uIdA2nTuDlQ/f+khE5wz10r5a+/7r9SBSlE7AMB63MNtL3/pIYMdXtcvw8rD
tvNXU7VT5jRrLH/tfXcMAMRzD7dxoB57yBBlJrWlHvIUuG4JewXUzlPUjvwF
AKzEPdzGgXrsIe8Kn9GdSW24h1zp+6+9745TByrCvUMBgDW4h9vZNvPX3vdf
2eSvjeevQexczrZcOwCwQe7hduYeblmT0kMGc+/QtOlEDZQvNn8lUzsAsB3u
4TbV5fdf8leD/O285PJvrXaKUDsAsBHu4XY50Fbz1949BOqqd0q3VDvPNVBN
agcANsI93C4Hkr/kryrkr/YH2vv+CwBYmXsIbPweAjkz2ush6U61/AUAbJP8
tfH8NUhIXgP5K5zvv9ofaF/xlFY7AEAI93BLm07UQPmsoWqQ/NX+QHv5CwBo
jHu4pX9VJH9tm/zV/kB7+QsAaIwesv2BatJDhlM7OX58fXn9/rPCQPIXANAU
PWT7A+19/9UktZND/gIAoFnu4dYg+SuH/AUAbJMesv2B9nrIJqmdHPIXALBN
esj2B9rrIZukdnLIXwDANukh2x9or4dsktrJIX8BANukh8yhh9yy0yk98euf
v73M+P2XuZ98/jz3k3/8c+4nCwP99a/XuR/Zhwr7oHYAgHvkrxzyFwAAEE7+
yiF/AQAA4eSvHPIXAAAQTv7KIX8BAADh5K8c8hcAABDOPdzsg3u4AQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwhv8frbg8fA==
     "], {{0, 648}, {1152, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{1152, 648},
   PlotRange->{{0, 1152}, {0, 648}}]], "Input",ExpressionUUID->
  "ec0d5a50-2c1e-498c-9832-04d73426f450"],
 "\nThe above image shows how the corners start with random values, which are \
then used to set the center. Then the same is done with a smaller subsquare \
of dimension (n+1)/2 where n is the dimension of the previous, larger square. \
This subsquare recurses ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "n"], "*", 
    SuperscriptBox["2", "n"]}], TraditionalForm]],ExpressionUUID->
  "22870af6-30b0-4ab9-89c3-650f60e53c6a"],
 " times over the array, where n is the exponent in the original ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "n"], TraditionalForm]],ExpressionUUID->
  "1823a32f-a462-4337-8da0-17d1287ac904"],
 "+1 equation used to generate the size of the array. This is why the \
midpoint method only works with arrays of dimension ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "n"], TraditionalForm]],ExpressionUUID->
  "dbd32cb3-41c6-487c-9125-2a8d0091b2ff"],
 "+1. On a higher order array, a 9x9 for example, the recursion looks like \
this:\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
gNSkWx4fcs2cXD01ygeWsWNYB2XjePJ9vVqaP6TNy7X6wlDwsnpNnj8nLO7X
q7tqtaaqtaq6Ww2+P9XFt/MnQ9Y0eEZkOYHo86ODRya/Zytben1xKPi+rm/d
P7fz9CtLCx43fWvbiqPPz2zwFLFelgEAUpNueXzINbdM58Yxi4J85PY7ppyX
zK++cySGRVs0L/3g73u3TbfnmtuCdOj4l6YY9hvKebd7pggbqn3t27tEqDS6
V7YyfwJ8XYNnRJYTiD6f0udHJb8XfNO9aih5op77/rlK8krjqmtX5n1+gitL
Cx43fWvbiqPPz2zwFLFelgEAUpNueXzINYuSxCnN3tg/V7iK7Y/6zQonFaWw
aEtSkVM+9sc3tsIp9k3w/DY3ectsRVClIiHv3PHQMQkxL4fjTpUQSZo/Ab6u
wTMiwwn8GDwivmzkWfvNu+DVvebj/TUGF1r123S4pjV/PRr+1dRqcYLHzV70
OVCO0m/qxyu29/GO9ekwLXh08nu2WpQIqbqjoXNEyJEzHLnBcHH+fH6CK0sL
Hjd9kdcoYX7WN3hMTCdIdoOniPWyDACQmnTL40PB5op8juc3iMAFhA0S/Mhx
95srTn7MEZKfDucJCX7kuPn+fsGLBbLBB6PTl03ezs2fDFnX4BmR3QSO//bq
u7L8uyQtfMkltf59tkW7/8lQSg9Gpd9l5aDl3+3FcdMy3srS0tvfGq27jT5o
wWOinAPlKEPvVJWX3l6S1VNvGCM4JfnB1pdBMoOcB8M82RCmr1/YV/PJV5YW
PK7oa5QsP2scPCamEyS7wdPDelkGAEhNyvURAABgnbFelgEAUsO6oAIAAGQI
62UZACA1rAsqAABAhrBelgEAUsO6oAIAAGQI62UZACA1rAsqAABAhrBelgEA
UsO6oAIAAGQI62UZACA1z1ksB92vjrPqqzvdA3nwc/Wo8zPYQXl4464e/eYP
1zt4RmQ3gYGetzz0fWFT0tGg21l6r9td2Hd7cLV8eu7VwnB08Jho50D7Ffre
8q/v9UexglOSP/Td1cl3Z9cmyZWlBY+Pco0S5Getg8fFcIJkOXhKWC/LAACp
Sb1CLgg2USekoJzY1RLP5eTquaW8IYUcf7+J+mS4Ytk1med4uWZblQJ5w/Pz
fbwJIVtG40wXOU7cbzQOxMnL+cr9Du3rGTwjspvA8Q+rfGAvNwPnRvnk7hOI
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
1mDk1X/j5Pfd8VVD5sT6j3H/oxIWba31a+ydilyp0R11GyVOPPXGvaYyWxGC
T0gftDSOGO3BoP0X4f6YRHOru+GKsK7BMyLLCTRXNY19+ygMvnJZ79y3MauG
XTNW8NjZizwHylEm3eD5iqOF76IGj0x+z9ZPvNnwl8Hgi0E4rTUYu+/UsM9P
cGVpweOmL/IcaEdJdHfRgye4uxJe2ZiYTpDs1o0UsV6WAQBSk255fMg1NwtS
vmx97zuHklA0nZ5n7QjSZiEs2oVCUSgfe/1LU8pL5mXfOy4LxUJhtiJohS1B
2m/617aSF5QPvn+hS3mxsBeuCOsaPCOynED0+dHBI5Pfs7VNUSjqzWvfrghC
xfavm3pREDe1sM9PcGVpweOmL/IcaEdJdHfRg6PPjw6e1bqRItbLMgBAatIt
jw+5Zk6unhrlA8vYMayDsnE8+b5eLc0ftuTlWn1hKHhZvSbPn+QU9+vVXbVa
U9VaVd2tBt+f6uLb+X/hXdPgGZHlBKLPjw4emfyerWzp9cWh4Pu6vnX/3M7T
rywteNz0RZ4D7SiJ7i56cPT50cGzWjdSxHpZBgBITbrl8SHX3DKdG8csCvKR
2++Ycl4yv/rOkRgWbdG89IO/t9k23Z5rbgvSoeNfmmK4Iijn3e6ZImyo9rVv
7xKh0uhe2cr8Sc51DZ4RWU4g+nxKnx+V/F7wTfeqoeSJeu775yrJK42rrl2Z
9/kJriwteNz0RZ4D7SiJ7i56cPT50cGzWjdSxHpZBgBITbrl8SHXLEoSpzR7
Y/9c4Sq2P+o3K5xUlMKiLUlFTvnYH9/YCqfYN8FzmNzkLbMVQZWKhLxzx0PH
JMS8HI47VUIkaf4k57oGz4gMJ/Bj8BDvspFn7Tfvglf3mo/30RtcaNVv0+Ga
1ny8e8mvplaLEzxu9qLPgXKUflM/XrG9j3esT4dpwaOT37PVokRI1R0NnSNC
jpzhyA2Gi/Pn8xNcWVrwuOmLPAfaURLdXdTgSe6uhFc2JqYTJLt1I0Wsl2UA
gNSkWx4fCjZJ43M8v0EELiBskOBHjrvfJG3yY46Q/HQ4T0jwI8fNd2ALXiyQ
DT4Ynb5s8nZu/l941zV4RmQ3geO/vfquLP8uSQtfckmtf59t0e5/MpTSg1Hp
d1k5aPl3u4jctIy3srT09rdG624XEVrwmCjnQDnK0DtV5aW3l2T11BvGCE5J
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
p8N5QoIfOS78e7lglBPIBh+MTl82eTs3++/vY/+ToZQk6ffFL1k5aPl3/zD8
pmW8lR+OSvJbo3X3r87/9uq7srw0WlLr32fbwz9r8Jgo5xB9lGBrxyCZQc6D
9PFkQ5jm835rx4hLQ0v+0DtV5aVzK8nqqTf7DRPlhxY8puhzoB0l0Q2QLPnR
8yLpmcfEdIIkCU67dRMmPwWZTd3rr4oJ507CwvUvr4pZDh7T6519yZJPwbDF
hVt8Hi4AAAAAPA+GLS7cos8HAAAAgOfBsMWFW/T5AAAAAPA8GLa4cIs+HwAA
AACeB8MWF27R5wMAAADA82DY4sIt+nwAAAAAeB4MW1y4ffY+f9D96jirvrrT
vVgHP1ePOj+DnVyHN+7q0W/+bCuo0aDbWRp1uwubwA6uliO4VwvDPW858veF
nYifNXhMtHOIOsrQd1cn352mj3JpYiS/7y2Pev2FPcqSJZ8SPCbKOUQfJckN
kCz50fMi+ZnHxXCCJAhOu3UTJz8pVMX/InhMqIr/RfCYUBVX3zYxoSquTH4k
hi0u3L7I/vmEFJQTu1riuZxcPbeUN6SQ4++3qp4MVyy7JvMcL9dsq1Igb3h+
vn8+IWTLaJzpIseJ+43GgTh5OT/7XMtBa1+1Pi/deG1rV2/d3ZmfdPWkvXRb
tk9U/dP0zvxhlQ/s5Zv23Cif3H3WxrMGj4lyDpSjBFu4T9InGmcNfYvjtvTG
mRGkL3e/hXvEpaEkf+RZO4a9POttY8fyRonzQwseN33R50A5SrIbIFnyo+dF
wjOPi+UESRScVjeSJT8FqIqoiqiKqIr/oqrIsMWF2xfo83OCvK2Yn93mn1p5
T2922mZFljeE8ObhhW1ZOWy7F7q2o+kXbvtQkUtECFc0vijLew33q6VVFO3E
cd9rckkW5nfmobPimJf3n9TsPC6AI+f+Y6BXfMSDbx++QPCYKOdAOcqkqOYk
uaQ1Oo61pyh7ltNpaCVZzodFNfLSUJLfs80P/opjf7j/hPen54cWPKboc6Ad
JdENkDD50fMi4ZnHxHSCJAxOqxtJkp8CVMWVwWNCVVwdPCZUxZVnHhOq4tOq
IsMWF25foM/faw1GXv03Tn7fHV81ZE6s/wg+Rz68ebTJH0W9U5ErNbqjbqPE
iafeuNdUZndm8EnNg5bGEaM9GLT/Itwfk2hudf759Svvsc79bb9q2L2fUyvK
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
GMLnJxOcEfj88OCMpNeKw+cLG3wZOLUNtX5R3T02q3tV83i3ejb6vVEvBR+F
zamnjaki/7LGqRp8Pr9w1Kgf6PVTXT+t6wd1//cLo7AvunSCZEVtx2hMS+f/
3jB2go+OkLqGIj6yIi04j/jkeYGsSAtOyxs84tNI0OKCIXx+MsEZgc8PD85I
eq04fL6wwZeBU9up2Y92rZhXPzjdu5q6qdRuPPtDYdKAQu3W83fV3tecJ6f2
Pq+c2N5trTBZr7XLTuejlt/Sre+edSDny83Og6WVRZdOkKw4Eqrz0NQ2Zf3S
8y51eVNrPnSs8sRqEruGIj6yItXnc4hPnhfIilSfT8kbPOLTSNDigmH8Pr9+
2Jp/SkXvS6X+dVx8Wmn9mCv+0aqcjkfmZ/8TZbMMXPOo1U13cEYobaDcpdsy
zkIeZOGeGePiWIPz6UMLzgi5DZz6pDc4I9mdfXziLwGnVlQUSWs9PXuXmlS2
vEG3VZaUojJZUhWlKGmfu8+PliZp1qP/KVlpVOV1vdaVoiz/4Tz37Zos1277
z3d1WVaUyedshZVOiKz4ZOlFRZbrzqBvf5DlD3Z/4PjyFScfESd2DUV8ZEVy
cD7xyfMCWZESnJY3uMSnkaDFBcP4n5/vXVW1kqL8Pv2jasdt7+WL4Y/t6r76
c6mi7lfbL986/9dtHKjqTGlJb9z30x58OepR7tJ3L3R1pnpJ1S/cfvzB+fSh
BWeE3AZOfdIbnJHszj4+8fnxH2GX28jltuS85JPfkv0/JentEXajPzdkeXNc
vCnL/p+SNNmX80ulvLyV80vHl42qS6///i6wdCJkRf/Rjr6Yvua+fDl5Kz/W
8+3RjoSuoYmPrEgMzic+eV4gK5KD04Yup/gUErS4YIjzcAEAAAAAQDwkaHHB
ED4fAAAAAADEQ4IWFwzh8wEAAAAAQDwkaHHBED4fAAAAAADEQ4IWFwzh8wEA
AAAAQDwkaHHBED4fAAAAAADEQ4IWFwxX4PMHvc6dbd9M/zidqYfA9h6cn0tt
52Gq+MmdKbXvu1kIviT1aC+h686U3rjdwUqC84pPCc4IpQ18+qQ3OCtZnX2c
wfkR+dUhKyIrcuiT3uCsZHX2xZkVE7S4YBi7z++1j3Tzr5nBc20eGO3xgQ69
K0M/v54ZPNfnunE1Hj/fzN1ja3ZkXlZ3z92UB1+OepS7DFxzr2rN5j2rume6
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
i8umdarmpJx6apnlbfm3XO51WGqjUnmn2vxoFCSpcNRsHhdGl+fKL8NS4Pe2
ImxbPVlj+QrVj01jR5J2jObHqi/fhvaa9IhdQxEf21bk4Hzik+cFtq3IwWl5
g0/8xQnS5nDa54t64C8OCsdB4cKe5Y2DwoUNHko020m+Jk47nFnIgofKy17F
HwMbefW9VvvLaf23sntotO6ua2VV3cpPRk4u/17VTq6dL0Zlr2J8ca5PNLUk
5yc+P1dU1cOmc2NWylrl3Hb+rKglNV8W/b2tINtW2oailirNO9s81LRD075r
VkqqujmxmsSuoYiPbStacB7xyfMC21a04LS8wSP+4gRpcwifD58Pny9qcEay
O/vg8zMLWfBQedmr+GPgsN0buI3/SOqfneeHpioVGt+eu5+1yciptH88uxcF
qdTsDDrNklS4cJ+fWtrrsPTPr++1K5Jcve71rv8nS/83iubUD0Qf84IsZ8a5
+yrf373e31VZqrR7z84f+mvSI3YNRXwsZ7TgPOKT5wWWM1pwWt7gEX9xgrQ5
hM8XIzHC56fUisPnCxs8lGi2k3xNnHY4s5AFD5WXvYo/Bt5tK5u75n3XPlHy
xZr95Jp7eeXd9mTkbG8X87tnbve2pmwqtduue7abL25vvw7LyvZOXjlqed8t
bTOvffK8L4ayWdg+FH3MC7KcVd4V8kWj9d2zyvl82fK+t4xivvCu8pr0iF1D
ER/LGS04j/jkeYHljBacljd4xF+cIG0O4fPFSIzw+Sm14vD5wgYPJZrtJF8T
px3OLGTBQ+Vlr+KPgQ21flHdPTare1XzeLd6Nvq9US8FH4XNqaeNqSL/ssap
Gnw+v3DUqB/o9VNdP63rB3X/9wujsC/6mBdkOdN2jMa0dP7vDWMn+OgIqWso
4mM5owXnEZ88L7Cc0YLT8gaP+IsTpM2p5OnUD1vzX+vtfanUv46LTyutH3PF
P1qV0/EL/Oz/g8UsA9c8anXTHZwRShsod+m2jLOQ70m5Z8a4ONbgfPrQgjNC
bgOnPukNzkh2Zx+f+GFEs53ka+K0w5mFLHiovOxV/CV1p2Y/2rViXv3gdO9q
6qZSu/HsD4XJklqo3Xr+rtr7mvPk1N7nlRPbu60VJuu1dtnpfNTyW7r13bMO
5Hy52XmwtLL4TkMMn1+2Og9NbVPWLz3vUpc3teZDxypPrCaxayjiw+dTfT6H
+OR5AZ9P9fmUvMEj/uIEaXM6eXpXVa2kKL9P/6jacdt7+d7BY7u6r/5cqqj7
1fbLlxr+dRsHqjpTWtIb9/20B2eE0gbKXfruha7OVC+p+oXbjz84nz604IyQ
28CpT3qDM5Ld2ccnfgjRbCf5mjjtcGYhCx4qL3sVf0ktKoqktZ6evUtNKlve
oNsqS0pRmSypilKUtM/d50dLkzTr0f+UrDSq8rpe60pRlv9wnvt2TZZrt/3n
u7osK8rkc7bCvrcVYtvqydKLiizXnUHf/iDLH+z+wPHlK04+Ik7sGor42LYi
B+cTnzwvsG1FCU7LG1ziL06QNhdMngAAkGKi2U7yNXHa4cwSocvYq/hLqiTl
NnK5LTkv+eS3ZP9PSXp7hN3ozw1Z3hwXb8qy/6ckTfbl/FIpL2/l/NLxZaPq
0uu/vwv83laEbSv/0Y6+mL7mvnw5eSs/1vPt0Y6ErqGJj20rYnA+8cnzAttW
5OC0ocsp/sIEaXPB5AkAACkmmu0kXxOnHc4sEbqMvQoAAKw5QdpE8gQArA/R
bCf5mjjtcGaJ0GXsVQAAYM0J0iaSJwBgfYhmO8nXxGmHM0uELmOvAgAAa06Q
NpE8AQDrQzTbSb4mTjucWSJ0GXsVAABYc4K0ieQJAFgfotlO8jVx2uHMEqHL
2KsAAMCaE6TNn5LnoNe5s+2b6R+nM/WMod6D83Op7TxMFT+5M6X2fTcLwRmh
tYH2ErruTOmN2x2sJDiv+JTgjFDawKdPeoOzktXZxxl8jmi2k3xNnHY4s5AF
D5WXvQoAAKw5QdqcSp699pFu/jWzpF6bB0Z7/LzQ3pWhn1/PLKnX57pxNV5V
v5m7x9bsen1Z3T13Ux6cEUobKHcZuOZe1Zp1g1Z1z3QHcQfn04cWnFU+chv4
9ElvcFYyO/v4gocRzXaSr4nTDmcWxqH9HNHn9zqzk+71p/Mycv4JL7X/8UdO
/3H2zePrz1fv9el7Ir+3TXzbqu854eI7Y/koXcMgPratfh2cT3zyvOBvOSvp
3FmiDV1u8RckSJtTydOpndghl96+HQRmz4/2gf12yljI2TSedTJ5cGhagzNC
aQPlLk9W7ZMXUvxpcsxcjMH59KEFZ4TcBk590huckezOPj7xw4hmO8nXxGmH
MwtZ8FB52au8PKpalre1c6teykkbav3S1H6Ttzdyb4+qHhWXTetUzUk59dQy
y9vyb7lc8Px8WZZ3qs2PRkGSCkfN5nFhdHnu9VxLgd/birBt5T/CfSRfofqx
aexI0o7R/Fj15dt4e4Q7oWso4mPbihycT3zyvMC2FTk4LW/wib84QdocTvt8
cU8Tzv5B4TzHSXOe5Y2DwoUNzkh2Zx+f+GFEs53ka+K0w5mFLHiovOxV/DGw
kVffa7W/nNZ/K7uHRuvuulZW1a38ZOTk8u9V7eTa+WJU9irGF+f6RFNLcn7i
83NFVT1sOjdmpaxVzm3nz4paUvNl0d/bCrJtpW0oaqnSvLPNQ007NO27ZqWk
qpsTq0nsGor42LaiBecRnzwvsG1FC07LGzziL06QNofw+fD58PmiBmcku7MP
Pj+zkAUPlZe9ij8GDtu9gdv4j6T+2Xl+aKpSofHNP0d+MnIq7R/P7kVBKjU7
g06zJBUu3OenlvY6LA3z/rnXrkhy9brXu/6fLP3fKJpTPxB9zAuynBnn7qt8
f/d6f1dlqdLuPTt/6K9Jj9g1FPGxnNGC84hPnhdYzmjBaXmDR/zFCdLmED5f
jMQIn59SKw6fL2zwUKLZTvI1cdrhzEIWPFRe9ir+GHi3rWzumvdd+0TJF2v2
k2vu5ZV325ORs71dzO+eud3bmrKp1G677tluvri9/TosK9s7eeWo5X23tM28
9snzvhjKZmH7UPQxL8hyVnlXyBeN1nfPKufzZcv73jKK+cK7ymvSI3YNRXws
Z7TgPOKT5wWWM1pwWt7gEX9xgrQ5hM8XIzHC56fUisPnCxs8lGi2k3xNnHY4
s5AFD5WXvYo/BjbU+kV199is7lXN493q2ej3Rr0UfBQ2p542por8yxqnavD5
/MJRo36g1091/bSuH9T93y+Mwr7oY16Q5UzbMRrT0vm/N4yd4KMjpK6hiI/l
jBacR3zyvMByRgtOyxs84i9OkDankqdTP2zNf62396VS/zouPq20fswV/2hV
Tscv8LP/DxazDFzzqNVNd3BGKG2g3KXbMs5Cviflnhnj4liD8+lDC84IuQ2c
+qQ3OCPZnX184ocRzXaSr4nTDmcWsuCh8rJX8ZfUnZr9aNeKefWD072rqZtK
7cazPxQmS2qhduv5u2rva86TU3ufV05s77ZWmKzX2mWn81HLb+nWd886kPPl
ZufB0sriOw0xfH7Z6jw0tU1Zv/S8S13e1JoPHas8sZrErqGID59P9fkc4pPn
BXw+1edT8gaP+IsTpM3p5OldVbWSovw+/aNqx23v5XsHj+3qvvpzqaLuV9sv
X2r4120cqOpMaUlv3PfTHpwRShsod+m7F7o6U72k6hduP/7gfPrQgjNCbgOn
PukNzkh2Zx+f+CFEs53ka+K0w5mFLHiovOxV/CW1qCiS1np69i41qWx5g26r
LClFZbKkKkpR0j53nx8tTdKsR/9TstKoyut6rStFWf7Dee7bNVmu3faf7+qy
rCiTz9kK+95WiG2rJ0svKrJcdwZ9+4Msf7D7A8eXrzj5iDixayjiY9uKHJxP
fPK8wLYVJTgtb3CJvzhB2lwweQIAQIqJZjvJ18RphzNLhC5jr+IvqZKU28jl
tuS85JPfkv0/JentEXajPzdkeXNcvCnL/p+SNNmX80ulvLyV80vHl42qS6//
/i7we1sRtq38Rzv6Yvqa+/Ll5K38WM+3RzsSuoYmPratiMH5xCfPC2xbkYPT
hi6n+AsTpM0FkycAAKSYaLaTfE2cdjizROgy9ioAALDmBGkTyRMAsD5Es53k
a+K0w5klQpexVwEAgDUnSJtIngCA9SGa7SRfE6cdziwRuoy9CgAArDlB2kTy
BACsD9FsJ/maOO1wZonQZexVAABgzQnSJpInAGB9iGY7ydfEaYczS4QuY68C
AABrTpA2p5Jnr3Nj22E/nfFzhHr/hJfa//hPIeo/OuGlX73XrzEPep27mVKn
M/UAo97DbATnYar4yZ2NfD/1oKtYgzNCawPpLn3PCRffGctH6RoG8bvubKnb
nfoKPJ/4lOCMUNpAvgvPAOATnzwv+FvOSoIThCM4behyiz9HNNtJviZOO5xZ
yIKHysteBQAA1pwgbU4lT/+ZP7K8rZ1b9VJO2lDrl6b2m7y9kXt75s+ouGxa
p2pOyqmnllneln/LBQcIjkrlnWrzo1GQpMJRs3lcGF2eez0goNc+0s2/Zpbj
a/PAaL+s11eGfn49s1hfn+vG1Xi9/mbuHluzS/lldff85VGusQZnhNIGyl38
Z2GN5CtUPzaNHUnaMZofq758G2/PwiJ0DUX8gWvuVa1ZL2RV90x3wK0PLTir
fOQ2UO7CNwD4xCfPC86Ws5LkBOEKTssbfOKHEc12kq+J0w5nFubBHc3nY9vq
F8EZwbbVL4Izgm2r8GHDCLatQsVfkCBtDqd9/kZefa/V/nJa/63sHhqtu+ta
WVW38sGZvPn3qnZy7XwxKnsV44tzfaKpJTk/8fm5oqoeNp0bs1LWKue282dF
Lan5YL0+sUPacft2ypg9P5UG9tsRZiEH33jWyQqCM0JpA+UuI6u5oailSvPO
Ng817dC075qVkqpuBmdVk7qGIv6TVfvkhdz709sBgtH1oQVnhNwG2l24BgCn
+OR5wdlyRhKdIJzBaXmDR/wwotlO8jVx2uHMQhY8VF72Kti2+kVwRrBtFR6c
VT5sW4UOG0awbcW8bUUmSJvDaZ9/2O4N3MZ/JPXPzvNDU5UKjW/+gVyTNlRG
r9S9KEilZmfQaZakwoX7/NTSXhOjf8pYr12R5Op1r3f9P1n6v1E0p34g/lHF
QhwUboyG2Yt8f/d6f1dlqdLuPTt/TM6wI3YNRXwcFE4LziM+eV7goHBacFre
4BE/jGi2k3xNnHY4s5AFD5WXvQq2rX4RnBFsW4UHZwTbVqEtZwTbVuzbVmSC
tDmc9vnvtpXNXfO+a58o+WLNfhq9d8sr77YnbdjeLuZ3z9zubU3ZVGq3Xfds
N1/c3n59gZXtnbxy1PK+W9pmXvvkeV8MZbOwfSi+0xDC51feFfJFo/Xds8r5
0ajwvreMYr7wrvI6fYhdQxEfPp8WnEd88ryAz6cFp+UNHvHDiGY7ydfEaYcz
C1nwUHnZq2Db6hfBGcG2VXhwRrBtFdpyRtK8nK1624pMkDaHP31uR61fVHeP
zepe1TzerZ6Nfm/US8G/KeTU08ZUkX9Z41QN/qGzcNSoH+j1U10/resHdf/3
C6OwL37XCJEYtR2jMS2d/3vD2Aneg5O6hiI+EiMtOI/45HmBxEgLTssbPOKH
Ec12kq+J0w5nFrLgofKyV8G21S+CM4Jtq/DgjGDbKrTljKR5OVv1thWZIG0O
p33+Ts1+tGvFvPrB6d7V1NGNbjz7Q2HShkLt1vOb977mPDm193nlxPZua4XJ
eq1ddjoftfyWbo0G2IGcLzc7D5ZWFr9rhEiMI6E6D01tU9YvPe9Slze15kPH
Kk+sJrFrKOIjMVJ9Pof45HmBxEj1+ZS8wSN+GNFsJ/maOO1wZiELHiovexVs
W/0iOCPYtgoPzgi2rUJbzkiql7MVb1uRCdLmcNrnFxVF0lpPz96lJo3eBg66
rbKkFJVJGxSlKGmfu8+PliZp1qP/zw3SqMrrC9SVoiz/4Tz37Zos1277z3d1
WVaUyT9Y1A9b898Z7n2p1L+Oi08rrR9zxT9aldNx8M/+v4bMMnDNo1b8wRmh
tIFylydLLyqyXHcGffuDLH+w+wPHl684+bc2YtdQxO+2jLOQL2G5Z8arfDz6
0IIzQm4D7S5cA4BTfPK84Gw5I4lOEL7gtLzBJX4Y0Wwn+Zo47XBmIQseKi97
FWxb/SI4I9i2Cg/OCLatQlvOSKp9/oq3rcgEaXM47fMlKbeRy23JecknvyX7
f0rS23eBR39uyPLmuHhTlv0/JWnyAv1SKS9v5fzS8WWj6tLrG5ln76qqlRTl
9+kfVTtuey9fanhsV/fVn0sVdb/afvnGxL9u40BVZ0pLeuP+9TlbsQZnhNIG
8l3878j7Yvqa+/Ll5K38WM+378gTuoYmft+90NWZtpVU/cJ9fYVc+tCCM0Ju
A+0uXAOAT3zyvOBtOSOJThCe4LShyyl+CNFsJ/maOO1wZmEY1rPyslfBttUv
gjOCbavw4Ixg2yq05Yxg24p924pMkDYXTJ4AAJBiotlO8jVx2uHMEqHL2Ktg
2wrbVti2wrZV5retyARpc8HkCQAAKSaa7SRfE6cdziwRuoy9CgAArDlB2kTy
BACsD9FsJ/maOO1wZonQZexVAABgzQnSJpInAGB9iGY7ydfEaYczS4QuY68C
AABrTpA2kTwBAOtDNNtJviZOO5xZInQZexUAAFhzgrSJ5AkAWB+i2U7yNXHa
4cwSocvYqwAAwJoTpM2p5Nnr3Nh22E9n/Byh3j/hpfY//lOI+o9OeOlX7/Vr
zINe526m1OlMPcCo9zAbwXmYKn5yZyPfTz3oKtbgjNDaQLpL33PCxXfG8lG6
hkH8rjtb6nanvgLPJz4lOCOUNpDvwjMA+MQnzwv+lrOS4AThCE4butzizxHN
dpKvidMOZxay4KHyslcBAIA1J0ibU8nTf+aPLG9r51a9lJM21Pqlqf0mb2/k
3p75Myoum9apmpNy6qlllrfl33LBAYKjUnmn2vxoFCSpcNRsHhdGl+deDwjo
tY9086+Z5fjaPDDaL+v1laGfX88s1tfnunE1Xq+/mbvH1uxSflndPX95lGus
wRmhtIFyF/9ZWCP5CtWPTWNHknaM5seqL9/G27OwCF1DEX/gmntVa9YLWdU9
0x1w60MLziofuQ2Uu/ANAD7xyfOCs+WsJDlBuILT8gaf+GFEs53ka+K0w5mF
eXBH9fmivrdNOPiS1OPa/Ik1+JpvW4kdnJWszj7O4AsSpM3htM/fyKvvtdpf
Tuu/ld1Do3V3XSur6lY+OJM3/17VTq6dL0Zlr2J8ca5PNLUk5yc+P1dU1cOm
c2NWylrl3Hb+rKglNR+s1yd2SDtu304Zs+en0sB+O8Lscb6yZ52sIDgjlDZQ
7jKymhuKWqo072zzUNMOTfuuWSmp6mZwVjWpayjiP1m1T17IvT+9HSAYXR9a
cEbIbaDdhWsAcIpPnhecLWck0QnCGZyWN3jEDyOa7SRfE6cdzixkwUPlZa8i
8nvb7G9bcW5u8O0srfu2lcDBWcns7OMLvjhB2hxO+/zDdm/gNv4jqX92nh+a
qlRofPMP5JosqZVRY9yLglRqdgadZkkqXLjPTy3tdb32TxnrtSuSXL3u9a7/
J0v/N4rm1A/EP6pYiIPCjdFIeJHv717v76osVdq9Z+ePyRl2xK6hiI+DwmnB
ecQnzwscFE4LTssbPOKHEc12kq+J0w5nFrLgofKyVxH7vW32t614Njc4d5aw
bSVscEayO/v4xF+cIG0Op33+u21lc9e879onSr5Ys59G793yyrvtSRu2t4v5
3TO3e1tTNpXabdc9280Xt7dfX2BleyevHLW875a2mdc+ed4XQ9ksbB+K7zSE
8PmVd4V80Wh996xyPl+2vO8to5gvvKu8Th9i11DEh8+nBecRnzwv4PNpwWl5
g0f8MKLZTvI1cdrhzEIWPFRe9ipij/nsL2c8SY9zxcFyJmxwRrI7+/jEX5wg
bQ5/+tyOWr+o7h6b1b2qebxbPRv93qiXgo/C5tTTxlSRf1njVA0+n184atQP
9Pqprp/W9YO6//uFUdgXXT1BEqO2YzSmpfN/bxg7wUdHSF1DER+JkRacR3zy
vEBipAWn5Q0e8cOIZjvJ18RphzMLWfBQedmriD3ms7+cween1IrD5wsbPAJB
2hxO+/ydmv1o14p59YPTvaupm0rtxrM/FCZtKNRuPX9X7X3NeXJq7/PKie3d
1gqT9Vq77HQ+avkt3fruWQdyvtzsPFhaWXT1BEmMI6E6D01tU9YvPe9Slze1
5kPHKk+sJrFrKOIjMVJ9Pof45HmBxEj1+ZS8wSN+GNFsJ/maOO1wZiELHiov
exWxx3z2lzP4/JRacfh8YYNHIEibw2mfX1QUSWs9PXuXmlS2vEG3VZaUojJp
g6IUJe1z9/nR0iTNevQ/JSuNqry+QF0pyvIfznPfrsly7bb/fFeXZUWZfM62
ftia/y5B70ul/nVcfFpp/Zgr/tGqnI6Df/Y/xDvLwDWPWvEHZ4TSBspdniy9
qMhy3Rn07Q+y/MHuDxxfvuLkI+LErqGI320ZZyFfwnLPjFf5ePShBWeE3Aba
XbgGAKf45HnB2XJGEp0gfMFpeYNL/DCi2U7yNXHa4cxCFjxUXvYqIq/X8Pnw
+cJacfh8YYNHIEibw2mfL0m5jVxuS85LPvkt2f9Tkt4eYTf6c0OWN8fFm7Ls
/ylJk305v1TKy1s5v3R82ai69Prv78/eVVUrKcrv0z+qdtz2Xr538Niu7qs/
lyrqfrX98qWGf93GgarOlJb0xv3r4+FjDc4IpQ3ku/iPdvTF9DX35cvJW/mx
nm+PdiR0DU38vnuhqzNtK6n6hfv6Crn0oQVnhNwG2l24BgCf+OR5wdtyRhKd
IDzBaUOXU/wQotlO8jVx2uHMwjCsZ+VlryL0e9vMb1vxbW5w7iyt+7aVwMEZ
ye7s4xN/cYK0uWDyBACAFBPNdpKvidMOZ5YIXcZe5Vng97bZ37bi3Nzg3Fla
820rkYMzkt3Zxyf+wgRpc9HkCQAA6SWa7SRfE6cdziwRuoy9CgAArDlB2kTy
BACsD9FsJ/maOO1wZonQZexVAABgzQnSJpInAGB9iGY7ydfEaYczS4QuY68C
AABrTpA2kTwBAOtDNNtJviZOO5xZInQZexUAAFhzgrSJ5AkAWB+i2U7yNXHa
4cwSocvYqwAAwJoTpM2p5Nnr3Nh22E9n/Kif3j/hpfY//oOC+o9OeOlX7/Wb
xoNe526m1OlMPWOo9zAbwXmYKn5yZyPfTz3oKtbgjNDaQLpL33PCxXfG8lG6
hkH8rjtb6nanvgLPJz4lOCOUNpDvwjMA+MQnzwv+lrOS4AThCE4butzizxHN
dpKvidMOZxay4KHyslcBAIA1J0ibU8nTf1S1LG9r51a9lJM21Pqlqf0mb2/k
3h5VPSoum9apmpNy6qlllrfl33K54Pn5sizvVJsfjYIkFY6azePC6PLc67mW
vfaRbv41sxxfmwdG+2W9vjL08+uZxfr6XDeuxuv1N3P32Jpdyi+ru+cvj3KN
NTgjlDZQ7uI/wn0kX6H6sWnsSNKO0fxY9eXbeHuEO6FrKOIPXHOvas16Iau6
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
sRA=
     "], {{0, 514}, {1016, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{1016, 514},
   PlotRange->{{0, 1016}, {0, 514}}]], "Input",ExpressionUUID->
  "3609b80f-5d82-40f5-89dd-f162921c90c3"],
 "\nWhere the first \[OpenCurlyDoubleQuote]pass\[CloseCurlyDoubleQuote] is \
the midpoints of the corners and the very middle of the array being set, and \
consequent passes are the subsquares doing the same in smaller and smaller \
increments until a 3x3 square fills in the final values."
}], "Text",
 CellChangeTimes->{{3.7318483719562974`*^9, 3.731848461699559*^9}, {
  3.7324644101011553`*^9, 3.7324644639011946`*^9}, {3.73246451748864*^9, 
  3.7324647450475717`*^9}, {3.732464784316964*^9, 3.73246478501886*^9}, {
  3.7324648814905524`*^9, 3.7324650940416293`*^9}, {3.732465168931683*^9, 
  3.732465388298847*^9}},ExpressionUUID->"18440716-7418-406d-90a5-\
d4d83579a23c"],

Cell["", "Text",
 CellChangeTimes->{{3.7318492714220853`*^9, 3.7318492839953766`*^9}, 
   3.7324653942336245`*^9},ExpressionUUID->"1f7f92ad-3fdf-417d-8634-\
6fc7aebaaf9a"]
}, Closed]],

Cell[CellGroupData[{

Cell["First Attempt", "Subsection",
 CellChangeTimes->{{3.7324654283078327`*^9, 3.732465440696767*^9}, {
  3.7324656939631205`*^9, 
  3.732465695440052*^9}},ExpressionUUID->"abacdf1c-2d35-4f9b-9f1d-\
fd1d8adcb745"],

Cell[TextData[{
 "@arg arr - A square dim x dim array\n@arg dim - The dimension of the square \
array\n@arg xpon - The exponent of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "n"], TraditionalForm]],ExpressionUUID->
  "b46aacfc-3516-4df8-9a4f-b12f72facd35"],
 "+1 equation that generates the square matrix"
}], "Text",
 CellChangeTimes->{{3.732465697808365*^9, 3.732465802052553*^9}, {
  3.7324658346030006`*^9, 
  3.7324658563869*^9}},ExpressionUUID->"b38bf963-b0f2-4cec-aca0-f4a2fc543601"],

Cell[BoxData[
 RowBox[{
  RowBox[{"midDisp", "[", 
   RowBox[{"arr_", ",", "dim_", ",", "xpon_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"data", "=", "arr"}], ",", 
      RowBox[{"i", "=", "dim"}], ",", "topMid", ",", "leftMid", ",", 
      "rightMid", ",", "bottomMid", ",", "veryMid", ",", 
      RowBox[{"count", "=", "0"}], ",", "j", ",", 
      RowBox[{"k", "=", "1"}], ",", 
      RowBox[{"n", "=", "1"}], ",", 
      RowBox[{"m", "=", "0"}], ",", 
      RowBox[{"l", "=", "1"}], ",", 
      RowBox[{"o", "=", "1"}], ",", " ", "jitter"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "First", " ", "set", " ", "the", " ", "corners", " ", "to", " ", 
       "random", " ", "real", " ", "numbers"}], ",", " ", 
      RowBox[{
      "and", " ", "have", " ", "a", " ", "jitter", " ", "function", " ", "to",
        " ", "add", " ", "random", " ", "noise", " ", "for", " ", "later"}]}],
      "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"jitter", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"RandomReal", "[", "]"}], "-", ".5"}], ")"}], "*", ".15"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "=", 
      RowBox[{"RandomReal", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "i", "]"}], "]"}], "=", 
      RowBox[{"RandomReal", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "=", 
      RowBox[{"RandomReal", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "[", 
       RowBox[{"[", "i", "]"}], "]"}], "=", 
      RowBox[{"RandomReal", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Then", " ", "set", " ", "the", " ", "midpoints", " ", "to", " ", "the",
        " ", "averages", " ", "of", " ", "the", " ", "corners", " ", "they", 
       " ", "are", " ", "between"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"topMid", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "+", 
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", "2"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"leftMid", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "+", 
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/", "2"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rightMid", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "+", 
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", "2"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"bottomMid", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "+", 
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", "2"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "]"}], "]"}], "=", 
      "topMid"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "=", "leftMid"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "]"}], "]"}], "[", 
       RowBox[{"[", "i", "]"}], "]"}], "=", "rightMid"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "]"}], "]"}], "=", 
      "bottomMid"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "Do", " ", "the", " ", "same", " ", "for", " ", "the", " ", "very", 
        " ", "center"}], ",", " ", 
       RowBox[{"but", " ", "averaging", " ", "the", " ", "midpoints"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"veryMid", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"topMid", "+", "leftMid", "+", "rightMid", "+", "bottomMid"}],
         ")"}], "/", "4"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "]"}], "]"}], "=", 
      "veryMid"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "Iterate", " ", "across", " ", "every", " ", "other", " ", "point", 
        " ", "in", " ", "progressively", " ", "smaller", " ", "squares"}], 
       ",", " ", 
       RowBox[{
       "making", " ", "sure", " ", "not", " ", "to", " ", "set", " ", "the", 
        " ", "same", " ", "point", " ", "several", " ", "times", " ", 
        "throughout", " ", "the", " ", "iteration"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"j", "=", "0"}], ",", 
       RowBox[{"n", "<", " ", "xpon"}], ",", 
       RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"k", "=", "1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"i", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"i", "+", "1"}], ")"}], "/", "2"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"m", "=", "0"}], ";", "\[IndentingNewLine]", 
        RowBox[{"o", "=", "1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"o", "\[LessEqual]", " ", 
           RowBox[{"2", "^", 
            RowBox[{"(", "n", ")"}]}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"j", "=", "0"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{"l", "\[LessEqual]", " ", 
              RowBox[{"2", "^", 
               RowBox[{"(", "n", ")"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"topMid", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", "+", "m"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"k", "+", "j"}], "]"}], "]"}], "+", 
                   RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", "2"}], "+", 
                "jitter"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"leftMid", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", "+", "m"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"k", "+", "j"}], "]"}], "]"}], "+", 
                   RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "/", "2"}], "+", 
                "jitter"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"rightMid", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", "+", "m"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "+", "j"}], "]"}], "]"}], "+", 
                   RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", "2"}], "+", 
                "jitter"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"bottomMid", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "+", "m"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"k", "+", "j"}], "]"}], "]"}], "+", 
                   RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", "2"}], "+", 
                "jitter"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"veryMid", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                  "topMid", "+", "leftMid", "+", "rightMid", "+", 
                   "bottomMid"}], ")"}], "/", "4"}], "+", "jitter"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"data", "[", 
                   RowBox[{"[", 
                    RowBox[{"k", "+", "m"}], "]"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "j"}], 
                   "]"}], "]"}], "\[Equal]", "0"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", "+", "m"}], "]"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "j"}], 
                    "]"}], "]"}], "=", "topMid"}], ";"}], ","}], 
               "\[IndentingNewLine]", "]"}], ";", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"If", " ", "#1"}], ",", " ", 
                RowBox[{
                "these", " ", "if", " ", "statements", " ", "prevent", " ", 
                 "the", " ", "function", " ", "from", " ", "setting", " ", 
                 "the", " ", "same", " ", "midpoint", " ", "value", " ", 
                 "several", " ", "times", " ", "throughout", " ", 
                 "iteration"}], ",", " ", 
                RowBox[{
                "which", " ", "was", " ", "causing", " ", "problems", " ", 
                 "with", " ", "oddly", " ", "large", " ", "mountains", " ", 
                 "or", " ", "very", " ", "shallow", " ", "valleys"}]}], 
               "*)"}], "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"data", "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "m"}], 
                    "]"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"k", "+", "j"}], "]"}], "]"}], "\[Equal]", "0"}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "m"}], 
                    "]"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"k", "+", "j"}], "]"}], "]"}], "=", "leftMid"}], 
                 ";"}], ","}], "\[IndentingNewLine]", "]"}], ";", 
              RowBox[{"(*", 
               RowBox[{"If", " ", "#2"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"data", "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "m"}], 
                    "]"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"i", "+", "j"}], "]"}], "]"}], "\[Equal]", "0"}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "m"}], 
                    "]"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"i", "+", "j"}], "]"}], "]"}], "=", "rightMid"}], 
                 ";"}], ","}], "\[IndentingNewLine]", "]"}], ";", 
              RowBox[{"(*", 
               RowBox[{"If", " ", "#3"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"data", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", "+", "m"}], "]"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "j"}], 
                   "]"}], "]"}], "\[Equal]", "0"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "+", "m"}], "]"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "j"}], 
                    "]"}], "]"}], "=", "bottomMid"}], ";"}], ","}], 
               "\[IndentingNewLine]", "]"}], ";", 
              RowBox[{"(*", 
               RowBox[{"If", " ", "#4"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"data", "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "m"}], 
                    "]"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "j"}], 
                   "]"}], "]"}], "\[Equal]", "0"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "m"}], 
                    "]"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "+", "1"}], ")"}], "/", "2"}], "+", "j"}], 
                    "]"}], "]"}], "=", "veryMid"}], ";"}], ","}], 
               "\[IndentingNewLine]", "]"}], ";", 
              RowBox[{"(*", 
               RowBox[{"If", " ", "#5"}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"l", "++"}], ";", "\[IndentingNewLine]", 
              RowBox[{"j", "=", 
               RowBox[{"j", "+", "i", "-", "1"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"While", " ", "loop"}], ",", " ", 
             RowBox[{
             "this", " ", "loop", " ", "effectively", " ", "shifted", " ", 
              "the", " ", "subsquares", " ", "to", " ", "the", " ", "right", 
              " ", "across", " ", "the", " ", "array", " ", "until", " ", 
              "the", " ", "edges", " ", "were", " ", "set"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"o", "++"}], ";", "\[IndentingNewLine]", 
           RowBox[{"l", "=", "1"}], ";", "\[IndentingNewLine]", 
           RowBox[{"m", "=", 
            RowBox[{"m", "+", "i", "-", "1"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"While", " ", "loop"}], ",", " ", 
        RowBox[{
        "this", " ", "loop", " ", "shifted", " ", "the", " ", "subsquared", 
         " ", "down", " ", "across", " ", "the", " ", "array", " ", "and", 
         " ", "reset", " ", "the", " ", "value", " ", "that", " ", "was", " ",
          "shifting", " ", "it", " ", "to", " ", "the", " ", "right", " ", 
         "every", " ", "time", " ", "the", " ", "subsquare", " ", "set", " ", 
         "the", " ", "rightmost", " ", "edge"}]}], "*)"}], 
      "\[IndentingNewLine]", "]"}], ";", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"For", " ", "loop"}], ",", " ", 
       RowBox[{
       "this", " ", "loop", " ", "made", " ", "the", " ", "subsquares", " ", 
        "smaller", " ", "and", " ", "resets", " ", "the", " ", "variables", 
        " ", "counting", " ", "how", " ", "many", " ", "times", " ", "the", 
        " ", "while", " ", "loops", " ", "need", " ", "to", " ", 
        "iterate"}]}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "data"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.732465871020802*^9, 3.7324660758001857`*^9}, {
  3.7324661197931743`*^9, 3.7324661347589226`*^9}, {3.732466268592722*^9, 
  3.732466270486739*^9}, {3.7324663123660975`*^9, 3.7324663355407133`*^9}},
 CellLabel->
  "In[159]:=",ExpressionUUID->"04040351-524b-4c63-8a1d-3ce8a5f60748"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", "=", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"midArray", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"firstTest", "=", 
   RowBox[{"midDisp", "[", 
    RowBox[{"midArray", ",", "5", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"firstTest", ",", 
   RowBox[{"Filling", "\[Rule]", "Bottom"}], ",", " ", 
   RowBox[{"ColorFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ColorData", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<TemperatureMap\>\"", ",", "\"\<Reverse\>\""}], "}"}], 
        ",", "#3"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7324655631332507`*^9, 3.7324655935000777`*^9}},
 CellLabel->
  "In[160]:=",ExpressionUUID->"f4cc69ab-a56f-4ae8-92ec-15adc4a3dba7"],

Cell["\<\
This tends to generate fine-looking, if plain and smooth, terrain at small \
dimensions like 5x5 and 9x9, but at higher dimensions something went wrong \
and the terrain began to look... unrealistic.\
\>", "Text",
 CellChangeTimes->{{3.732466142118507*^9, 
  3.732466208296414*^9}},ExpressionUUID->"6c92e9e5-b249-4c16-b8bd-\
db20c8c61888"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", "=", "17"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"midArray", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"firstTest", "=", 
   RowBox[{"midDisp", "[", 
    RowBox[{"midArray", ",", "17", ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"firstTest", ",", 
   RowBox[{"Filling", "\[Rule]", "Bottom"}], ",", " ", 
   RowBox[{"ColorFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ColorData", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<TemperatureMap\>\"", ",", "\"\<Reverse\>\""}], "}"}], 
        ",", "#3"}], "]"}], "&"}], ")"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7324662109003353`*^9, 3.7324662560262985`*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"92c5fc52-7e6a-4992-9a2c-e0ce84704165"],

Cell["\<\
Random \[OpenCurlyDoubleQuote]potholes\[CloseCurlyDoubleQuote] of very low \
values and similar instances of repreated higher values appeared. \
Troubleshooting became a nightmare so a new approach seemed prudent.\
\>", "Text",
 CellChangeTimes->{{3.732466351194309*^9, 
  3.7324663914713645`*^9}},ExpressionUUID->"2ba88b10-3e32-437e-85f7-\
f41eab0c7743"],

Cell["", "Text",
 CellChangeTimes->{{3.732465443712817*^9, 
  3.7324654542999296`*^9}},ExpressionUUID->"8d717df9-6ba8-4acc-bb7c-\
04dfa5a74970"]
}, Closed]],

Cell[CellGroupData[{

Cell["Mid Edges", "Subsection",
 CellChangeTimes->{{3.732452622123327*^9, 
  3.73245262705492*^9}},ExpressionUUID->"e259b720-b361-4957-986f-\
7573bd5ec2b2"],

Cell["\<\
@arg arr - the input array
@arg dim - the dimensionality of the input array
@return - the modified array\
\>", "Text",
 CellChangeTimes->{
  3.7324691243939514`*^9, {3.7324692136371007`*^9, 
   3.732469239706137*^9}},ExpressionUUID->"dad2a8dd-2a85-48b5-968d-\
f4089e970341"],

Cell[BoxData[
 RowBox[{
  RowBox[{"midEdge", "[", 
   RowBox[{"arr_", ",", "dim_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"toCalc", ",", 
      RowBox[{"harr", "=", "arr"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"toCalc", "=", 
      RowBox[{"Floor", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dim", "+", "1"}], ")"}], "/", "2"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"harr", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "toCalc", "]"}], "]"}], "=", 
      RowBox[{"Mean", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"harr", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"harr", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "dim", "]"}], "]"}]}], "}"}], "]"}]}], ";", " ", 
     RowBox[{"(*", "top", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"harr", "[", 
        RowBox[{"[", "toCalc", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "=", 
      RowBox[{"Mean", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"harr", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"harr", "[", 
           RowBox[{"[", "dim", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
     RowBox[{"(*", "left", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"harr", "[", 
        RowBox[{"[", "toCalc", "]"}], "]"}], "[", 
       RowBox[{"[", "dim", "]"}], "]"}], "=", 
      RowBox[{"Mean", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"harr", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "dim", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"harr", "[", 
           RowBox[{"[", "dim", "]"}], "]"}], "[", 
          RowBox[{"[", "dim", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
     RowBox[{"(*", "right", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"harr", "[", 
        RowBox[{"[", "dim", "]"}], "]"}], "[", 
       RowBox[{"[", "toCalc", "]"}], "]"}], "=", 
      RowBox[{"Mean", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"harr", "[", 
           RowBox[{"[", "dim", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"harr", "[", 
           RowBox[{"[", 
            RowBox[{"1", "dim"}], "]"}], "]"}], "[", 
          RowBox[{"[", "dim", "]"}], "]"}]}], "}"}], "]"}]}], ";", " ", 
     RowBox[{"(*", "bottom", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "@", "harr"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7324526495318832`*^9, 3.732452677482732*^9}, {
   3.7324527192256255`*^9, 3.7324528980861564`*^9}, {3.7324539150366683`*^9, 
   3.7324539460848193`*^9}, {3.7324551837424316`*^9, 3.7324552222346244`*^9}, 
   3.732455306054359*^9, {3.7324557855043907`*^9, 3.7324557989585056`*^9}, {
   3.7324558376237564`*^9, 3.732455856066154*^9}, {3.7324560222292705`*^9, 
   3.7324560397572246`*^9}, {3.732456070770039*^9, 3.732456079156936*^9}, {
   3.7324561377534323`*^9, 3.7324561421436315`*^9}, {3.7324561777358007`*^9, 
   3.732456208382023*^9}, {3.7324565321854105`*^9, 3.732456608890152*^9}, {
   3.73246925244893*^9, 3.732469263920412*^9}},
 CellLabel->
  "In[168]:=",ExpressionUUID->"3fdf8718-e7df-40e5-9484-532871d8a02f"]
}, Closed]],

Cell[CellGroupData[{

Cell["Middle", "Subsection",
 CellChangeTimes->{{3.7324529168309393`*^9, 
  3.7324529174093065`*^9}},ExpressionUUID->"ec0efaea-94e9-4441-87ab-\
699e0d798be8"],

Cell["\<\
Same params and return as above, + 
@arg jitter - coefficient to scale the jitter amount.\
\>", "Text",
 CellChangeTimes->{{3.7324692740966716`*^9, 
  3.732469301021593*^9}},ExpressionUUID->"0f91288e-44f6-4e57-9ef1-\
6bec3171366f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"middle", "[", 
   RowBox[{"arr_", ",", "dim_", ",", "jitter_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"midPoint", ",", "dist", ",", "tupVal", ",", 
      RowBox[{"harr", "=", "arr"}], ",", "b"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"b", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"RandomReal", "[", "]"}], "-", ".5"}], ")"}], "*", 
       "jitter"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"b", "=", 
        RowBox[{"RandomVariate", "[", 
         RowBox[{"NormalDistribution", "[", "]"}], "]"}]}], ";"}], "*)"}], 
     RowBox[{"(*", 
      RowBox[{
      "we", " ", "would", " ", "be", " ", "interested", " ", "in", " ", 
       "looking", " ", "more", " ", "into", " ", "normal", " ", "distibution",
        " ", "jitter", " ", "in", " ", "the", " ", "fiture"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"tupVal", "=", 
      RowBox[{"Floor", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dim", "+", "1"}], ")"}], "/", "2"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dist", " ", "=", " ", 
      RowBox[{"tupVal", "-", "1"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "take", " ", "the", " ", "mean", " ", "of", " ", "the", " ", "four", 
       " ", "surrounding", " ", "points", " ", "and", " ", "set", " ", "the", 
       " ", "middle", " ", "point", " ", "to", " ", "that", " ", "value", " ",
        "plus", " ", "some", " ", "jitter"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"harr", "[", 
        RowBox[{"[", "tupVal", "]"}], "]"}], "[", 
       RowBox[{"[", "tupVal", "]"}], "]"}], "=", 
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"harr", "[", 
            RowBox[{"[", 
             RowBox[{"tupVal", "-", "dist"}], "]"}], "]"}], "[", 
           RowBox[{"[", "tupVal", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"harr", "[", 
            RowBox[{"[", 
             RowBox[{"tupVal", "+", "dist"}], "]"}], "]"}], "[", 
           RowBox[{"[", "tupVal", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"harr", "[", 
            RowBox[{"[", "tupVal", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"tupVal", "-", "dist"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"harr", "[", 
            RowBox[{"[", "tupVal", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"tupVal", "+", "dist"}], "]"}], "]"}]}], "}"}], "]"}], 
       "+", "b"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "@", "harr"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQvePm32Ni5187am/bdAJE123bcRZEl+7gvgSi3zrq
3ALRc1PtHoLoX+8uPgfR33ld34JoFml+L3EgzTQ73AdEHze6FASiM/Jbw0H0
P7e5D0D0F8NpD0F016Orz0H0AvGilyD6jMcaNQmQ/ebP1UH0oXQ+CxBdUbQf
TL8R3D8ZRAvdk58Hor/NO/wDRH+ZcQxMVzaw/wPR/Qv8/4NoNfeJLJJA+u7l
n2wg+kjUFCUQbRwzC0x3vVa2BtHsrzXA9D+f6Q4guidqBZieNzvNFUQfr0x1
A9Ebtj08IgekJ9hOOAmiw+p/dskD6Ty/0B4Q7VWzfhKI3mP3awqIBgBkObLY

  "],
 CellLabel->
  "In[169]:=",ExpressionUUID->"ff818274-a67c-4fb8-baec-f34e57139ba6"]
}, Closed]],

Cell[CellGroupData[{

Cell["caller", "Subsection",
 CellChangeTimes->{{3.7324541739586678`*^9, 
  3.732454174316682*^9}},ExpressionUUID->"7e6198b9-8c8a-4042-9309-\
6cbaaf254e5d"],

Cell["\<\
Recursive function calls midEdge and middle on the sub-square arrays of the \
larger array.
The base case is when dim = 3, once this is completed, the whole thing is \
completed. 
To accomplish this, we apply midEdge and middle to the input array, then \
recurse on the four subarrays which correspond to the four quadrants of the \
bigger array.
Once each step of recursion is complete, we recombine the four quadrants back \
into the new filled array. 
Since it is recursive, we have to modify the input argument, arr. To do this, \
we give the function the HoldAll attribute, which stops the input arguments \
from being evaulated immediately. This allows us to modify them later in the \
code. 

@param arr - the input array
@param dim - the dimension of the array (x and y dimensions are always the \
same, so we only need one argument for this).
@param jitter - the jitter coefficient to pass to the middle function.
@return - none, because the input array arr itself is modified.\
\>", "Text",
 CellChangeTimes->{{3.7324693337439833`*^9, 
  3.7324695636458735`*^9}},ExpressionUUID->"af01771f-bf75-4440-92b2-\
0269b7d472c7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"caller", ",", "HoldAll"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"caller", "[", 
   RowBox[{"arr_", ",", "dim_", ",", "jitter_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "smlrDim", ",", "tempArr1", ",", "tempArr2", ",", "tempArr3", ",", 
      "tempArr4"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"smlrDim", "=", 
      RowBox[{"Floor", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dim", "+", "1"}], ")"}], "/", "2"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"arr", "=", 
      RowBox[{"midEdge", "[", 
       RowBox[{"arr", ",", "dim"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"arr", "=", 
      RowBox[{"middle", "[", 
       RowBox[{"arr", ",", "dim", ",", "jitter"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<smlrDim=\>\"", ",", "smlrDim"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"arr", "//", "MatrixForm"}], "]"}], ";"}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"smlrDim", "\[GreaterEqual]", "3"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"we", " ", "have", " ", "to", " ", "use", " ", 
          RowBox[{"tempArr", "'"}], "s", " ", "to", " ", "avoid", " ", "over",
           " ", "indexing", " ", "arr"}], ",", " ", 
         RowBox[{
         "seems", " ", "to", " ", "be", " ", "a", " ", "quirk", " ", "of", 
          " ", "the", " ", "way", " ", "this", " ", "is", " ", "working", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"just", " ", "trust", " ", "us", " ", "on", " ", "this"}],
             ",", " ", 
            RowBox[{
            "this", " ", "was", " ", "a", " ", "big", " ", "headache", " ", 
             "to", " ", "figure", " ", "out"}]}], ")"}]}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"upper", " ", "left", " ", "subarray"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tempArr1", " ", "=", " ", 
         RowBox[{"arr", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"1", ";;", "smlrDim"}], ",", 
            RowBox[{"1", ";;", "smlrDim"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"caller", "[", 
         RowBox[{"tempArr1", ",", "smlrDim", ",", "jitter"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"upper", " ", "right", " ", "subarray"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"tempArr2", " ", "=", " ", 
         RowBox[{"arr", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"1", ";;", "smlrDim"}], ",", 
            RowBox[{"smlrDim", ";;", "dim"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"caller", "[", 
         RowBox[{"tempArr2", ",", "smlrDim", ",", "jitter"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"lower", " ", "left", " ", "subarray"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"tempArr3", " ", "=", " ", 
         RowBox[{"arr", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"smlrDim", ";;", "dim"}], ",", 
            RowBox[{"1", ";;", "smlrDim"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"caller", "[", 
         RowBox[{"tempArr3", ",", "smlrDim", ",", "jitter"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"lower", " ", "right", " ", "subarray"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"tempArr4", " ", "=", " ", 
         RowBox[{"arr", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"smlrDim", ";;", "dim"}], ",", 
            RowBox[{"smlrDim", ";;", "dim"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"caller", "[", 
         RowBox[{"tempArr4", ",", "smlrDim", ",", "jitter"}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"recombine", " ", "the", " ", "arrays"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"arr", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"1", ";;", "smlrDim"}], ",", 
            RowBox[{"1", ";;", "smlrDim"}]}], "]"}], "]"}], "=", "tempArr1"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"arr", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"1", ";;", "smlrDim"}], ",", 
            RowBox[{"smlrDim", ";;", "dim"}]}], "]"}], "]"}], "=", 
         "tempArr2"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"arr", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"smlrDim", ";;", "dim"}], ",", 
            RowBox[{"1", ";;", "smlrDim"}]}], "]"}], "]"}], "=", "tempArr3"}],
         " ", ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"arr", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"smlrDim", ";;", "dim"}], ",", 
            RowBox[{"smlrDim", ";;", "dim"}]}], "]"}], "]"}], "=", 
         "tempArr4"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.732454117267105*^9, 3.7324541969262867`*^9}, {
   3.7324545655839767`*^9, 3.7324547272339983`*^9}, {3.7324547663420744`*^9, 
   3.73245478905579*^9}, {3.7324548572336397`*^9, 3.7324548766066785`*^9}, {
   3.732454908674884*^9, 3.7324549427472763`*^9}, {3.732455144845169*^9, 
   3.7324551603199725`*^9}, {3.7324552512074995`*^9, 
   3.7324552788619204`*^9}, {3.7324553418842707`*^9, 
   3.7324554095664244`*^9}, {3.7324554713012414`*^9, 3.73245548082648*^9}, {
   3.732455554021941*^9, 3.732455628607601*^9}, {3.7324556798077765`*^9, 
   3.7324556800268226`*^9}, 3.7324562863181143`*^9, {3.732456320395579*^9, 
   3.732456325335765*^9}, {3.7324565989287205`*^9, 3.732456601490403*^9}, {
   3.7324567799584208`*^9, 3.732456783235962*^9}, {3.732456946523362*^9, 
   3.732457043910694*^9}, {3.732457093756466*^9, 3.732457213511942*^9}, {
   3.7324581338924694`*^9, 3.7324581594658756`*^9}, {3.7324695832665358`*^9, 
   3.732469673285015*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"09939f95-cc72-44b3-bd61-94bbe6823e37"]
}, Closed]],

Cell[CellGroupData[{

Cell["midPoint", "Subsection",
 CellChangeTimes->{{3.732453412566893*^9, 
  3.7324534151520987`*^9}},ExpressionUUID->"00b29450-d1af-40e5-b333-\
7633d5b31bdb"],

Cell["\<\
The method that we actually call to perform the midpoint method. 
@param n - the power that is used to calculate the size of the matrix
@param jitter - the jitter coefficient to be passed along the middle method.
@return - the filled array.\
\>", "Text",
 CellChangeTimes->{{3.7324695731254773`*^9, 3.732469579294462*^9}, {
  3.732469683026283*^9, 
  3.732469708862442*^9}},ExpressionUUID->"8ddac00b-addb-4b06-9f6b-\
c7924c21e544"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"midPoint", "[", 
   RowBox[{"n_", ",", "jitter_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"dim", "=", 
       RowBox[{
        SuperscriptBox["2", "n"], "+", "1"}]}], ",", "arr", ",", "tupVal", 
      ",", "sml"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Dim", " ", "x", " ", "Dim", " ", "array", " ", "of", " ", 
      RowBox[{"0", "'"}], "s"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"arr", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"set", " ", "corners"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"arr", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "=", 
      RowBox[{"RandomReal", "[", "]"}]}], ";", " ", 
     RowBox[{"(*", 
      RowBox[{"upper", " ", "left"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"arr", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "dim", "]"}], "]"}], "=", 
      RowBox[{"RandomReal", "[", "]"}]}], ";", " ", 
     RowBox[{"(*", 
      RowBox[{"upper", " ", "right"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"arr", "[", 
        RowBox[{"[", "dim", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "=", 
      RowBox[{"RandomReal", "[", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"lower", " ", "left"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"arr", "[", 
        RowBox[{"[", "dim", "]"}], "]"}], "[", 
       RowBox[{"[", "dim", "]"}], "]"}], "=", 
      RowBox[{"RandomReal", "[", "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"lower", " ", "right"}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"initiate", " ", "caller"}], ",", " ", 
       RowBox[{"which", " ", "is", " ", "recursive"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"caller", "[", 
      RowBox[{"arr", ",", "dim", ",", "jitter"}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "@", "arr"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"midPoint", "[", "3", "]"}], "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.732453241552457*^9, 3.7324532788318357`*^9}, {
   3.732453314287134*^9, 3.732453347433157*^9}, {3.7324533913194075`*^9, 
   3.7324533943561025`*^9}, {3.7324534422881746`*^9, 3.732453472489738*^9}, {
   3.732453759847828*^9, 3.732453764833764*^9}, {3.7324538277888517`*^9, 
   3.7324538297890425`*^9}, {3.732453954805068*^9, 3.732453959227334*^9}, {
   3.732453990655808*^9, 3.7324539932321167`*^9}, {3.7324540803891497`*^9, 
   3.732454084797107*^9}, {3.732454183704505*^9, 3.7324541901718407`*^9}, {
   3.732454431530429*^9, 3.7324545158519583`*^9}, 3.7324546009456315`*^9, {
   3.732454743032518*^9, 3.732454756707944*^9}, {3.732454867660455*^9, 
   3.7324549515877295`*^9}, {3.732455281865223*^9, 3.7324552826290503`*^9}, {
   3.7324553139444942`*^9, 3.732455314037855*^9}, {3.7324555464174323`*^9, 
   3.7324555464628305`*^9}, {3.732455587435996*^9, 3.7324555874989796`*^9}, {
   3.732456704450362*^9, 3.7324567174594655`*^9}, {3.7324567880759153`*^9, 
   3.7324567944142866`*^9}, {3.7324572295409064`*^9, 3.7324572378696623`*^9}, 
   3.732457705499934*^9, {3.732458119785464*^9, 3.732458128629347*^9}, {
   3.732469721769583*^9, 3.732469748928286*^9}},
 CellLabel->
  "In[172]:=",ExpressionUUID->"a6d4e158-459f-4537-9890-b613af2c7a35"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Diamond-Square Method", "Section",
 CellChangeTimes->{{3.7319454127258625`*^9, 
  3.7319454200349207`*^9}},ExpressionUUID->"82a7b5c8-3c9c-48a1-a653-\
9ef6a26fdd40"],

Cell[CellGroupData[{

Cell["Introduction", "Subsection",
 CellChangeTimes->{{3.7324662815361366`*^9, 
  3.732466284202079*^9}},ExpressionUUID->"70f0dd1b-25d2-4033-95c0-\
5ce6dba95b22"],

Cell["\<\
The diamond-square method is similar to the midpoint method, but it \
calculates every point by taking an average of four (or three) surround \
points. This is better than the midpoint method because having only two \
points can lead to \[OpenCurlyDoubleQuote]seams\[CloseCurlyDoubleQuote] in \
the output which are obvious. This method works by first setting the corners \
of the array randomly, then performing diamond and square steps iteratively.\
\>", "Text",
 CellChangeTimes->{{3.7324488497958775`*^9, 3.732448889521464*^9}, {
  3.7324490244406605`*^9, 3.7324490975849853`*^9}, {3.732449289214392*^9, 
  3.7324493072871614`*^9}, {3.732449363309673*^9, 3.732449378524439*^9}, {
  3.732449450961055*^9, 
  3.7324494577225533`*^9}},ExpressionUUID->"862cb1d1-2a95-4d68-9afa-\
daa43411514c"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQdYVFf6/4cp9N57R1ARVBCwoIiKgqKgInYUEKUIUobYJdlkk02y2dSf
xmRT1k3R1NUYa4xpJmvy32R309tuerLZuOkxsf1fuGYcp9wZ4N455w7fzzNP
ntE4zPe+nPK+33vOuQnVLbPr1CqVqt2d/jN7+SUT29qWr5vjT3+oaG6vX9m8
ora4uWPFyhVtedUa+ssCF5XqHZ1K1f0eAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgFYG+6rBAdXig
OshXzVqLGAEBAeE9BAUFsdYihqura1hYGOmk/9J71nJsQMEUokrhZa3FKl7u
LmGBGmqloQFqDdeNtF+4/AprIWL4+/vH9BASEsJaixharTYqKop0RkdH898N
AwMDhajSG9ZaxFBEE7UfRVyOn5+f0DZCQ0NZaxFDq1FFBmtiQjVRIRpXHdch
VRn1OM7TCUU0UQAAAAD0GapwKwpc/3qrz4+H/Ol1fLvPvImu9JesdZlCiejM
mTOff/75n3766eeff3755ZerqqrCw8NZ6zKF6r7ExMTbb7/9s88+O3fu3Oef
f37nnXcmJSW5ubmxlmYBCuCSJUsomBRSCuwLL7wwa9assLAw1rouws/LZXiy
9tErvE7s9Tt1xP/d+3x/U+MeHaJxpvzUxQqsdZlCJUx+fv6ePXs++eQTattH
jx6dM2cOh7aMRqOhOuuKK6547bXXTpw48dZbb/3+97+Pj4/X6XSspVmA6sHi
4uJDhw591sPBgweLioo4LBIV0UTtRCk9LiAgYOzYsY8++ij1uC+++OLpp5+u
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
yZ/7DNXjQpptkd/85jecdEPK9J5++mnK7q655pqPPvrIROenn35K0yJrjeeZ
OHGiSDecN28eP90wPDz8zTffNFF49OjRW2655fvvv6duyMO2IDc3t3Xr1jlN
N6R63Hi5nbEhQ1Dz5qR4oXL18OHD1sJOpSs/PW7s2LHG2owNGWLp0qX8LHug
DmW8FtEEagk89DhXV9e2tjYTbQZD5syZM5S8sdbYX2hCefDBBy3+FjZt2uTv
789a4HlctarCLN1Ph/wNvoHh9foO38hgXhq2qidVPn78uHk8qcFQ8slJIiHg
6e6yYJLbqSMWonrs/3zCAnmJakJCgvEOAgPffvvt8OHD+Ukk+k9ogProjd7m
v473d/omRPDy6xBwMcLYkOHNPYgO0bx1j695SI/f6hMRxG9ITQwZfqJKvW1Y
ovbEXj/zkO7Y4BnMpc1lJwEBAXv37rWWlhA//vhjVFQUa5ndjBkzRkQnsXjx
YtYau4mIiHjnnXdEdP7rX//ixDsiKisrxaM6fvx41hpV1AKNSydzKKNT9L1C
b2/vnTt3ilwgXX50dDRrmd1kZWUJkqiRU9Fq7ubV1tay1tgNJaX//Oc/RUL6
ySef8NMNS0pKTOQZ3Bjhj1OnTmWtsfsxGTQdiIR0z549StlG4enp+ac//clY
vIkhQzVvTEwMa5ndZGRkiMT8XM9KCR6SpdDQ0JdeeslYmIkhw5V3NHnyZPGo
lpaWstbYPfF99913JsIMhgxx8OBB3paR9AqtVkutV+S3QEUBa43niQnVfLff
QgkgvP7yW68AXy4KAcoltm/fbi2e1HL4WfZMDIrR/PyE5ZDS68YWDy8PLka2
V155xVpIP//8cx7MW0kI8FHfsdbT2q/jjR2+/KyTcbkYE0OGhwlRIDRA/cJW
H2sh3XeNN1frZMQNGU6iGhms+fxRq0PxxqXuHm5c6OwDNOOfPHlSPDMZPXo0
a5ndy05uuukmcZ2PP/44D1V5QkKCuE6Ck0fVeHl5mSyHNufWW29lfluzsLBQ
XCTVrfyk+n2AxBtKb2tQEFjL7Oaqq64ySHrjjTeuvvrqTz75xFjnkSNHeKgR
4uPjxeNJpKSksJbZjZub2/33328szMSNIXbs2MH8eGeaCMTjSVMJJ+69TajH
GR/wdc7MkCGKi4tZy+xm8+bN4mF/7rnneNh/FxsbayLMxJAh0tLSWMvsRqfT
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
r1A35GRBnarHOzJ/MLcA1YlcLfWfMmUKzUHffPONRbWXXHIJJxYudUNrh8Dz
4xnaCfU446N7jA0ZKtWzs7NZCzyPm5sb5UUWY07cfvvt/LgcVDv/+9//Nmgz
NmS+/vprHpY6GKAOpdfrrUWV5kRO0glKwEzuQxkMmddff11ZPc4carri+0Ho
F8H8MHOBcRlih3N+/BAvT76mJvHmm2+KhLS8vJy1xvNQbVdZ6CoS1X/c5cPD
Y31iYmIs3oQSOHv2LCf3gvtPbJjm5GGxUrcwS6zUNdgyA8eQsWbFGBiRohWJ
5+kn/QfFiI0bBluGE0NGbg30S7RmxfwqUrWiVMw2/O8eP06G4j5DA475jZgv
v/wyNzeXk3pcIDg4ePXq1SY3tmg8vPLKK7kqyandDho0yGQB/LmeJf3UeZkv
hDYhNDT08ssvN1knQ0Fes2YNJ3dSVD23X8eNG2f+RIYnnniCK4OrP1A58+KL
L5pc4P/+97+xY8d6sH7ehzGURVPbMF9YddNNN+Xn59NwykmzoW5INaBxhSjw
wQcf0FzD/NlhBsaPH9/c3BwXF2eywOBcz5369evX8/AMHQEqjqg1mi/jOXbs
GA83sntLRETE888/L1yCwZD5+uuvJ0yYYLL2mC0BAQENDQ3mPW7btm2c9DUD
lFC9//77gjyDIfPxxx8PGTKEt5vI1K1o4jMJKaUTXV1d/PQ4V1fXnJwcY6tW
MGSOHz+u6GPTDMTHx5s878zAO++8w4/jFOSnvm+L5Q0dVFVNHKnjJ60bOXKk
tdVfR44c4eGENwOhAeqnbrS8p+PkYf+MJC5GDJr1qqqqLMZT6I/MH3shFV7u
LusWWz3X9/Af7HpGMw2eDli2Z9OQkVuAqqd0slnNBfmq791sdSPYDc0eIock
G6Bk1THdlrkhQ3mXTQc+PFAtcsR6ZaGrlpfUvu8EBwePGTNm+/btBw8efOCB
BxYuXEjJKm/WgaqnMKcZfO3atXv27Nm7d+9ll12WkpLCye1jE8LCwoqLi//0
pz8dOnRox44dJSUlXLlGxlAAKYyXXnophZQCu27dOhrcuDIBVD37eqjoW7p0
6YMPPnjgwIGtW7fm5ubykzlLApVX06ZN27VrF+XbTzzxRFtbG2XdvBUyqp4N
QYMGDbr66qufeeYZKsZvu+22ESNGCDuA6E17ezs/W6oppadpZffu3S+99NK+
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
mrcIiRdZuCswZ84c1jK73e877rhDXOff/vY3Hk4CT46yPWWnJ3BhyFDCfODA
AfGo7t27l/khQsXFxeIiCU421tkkMljzi/UDZITXwskXjXsFBQVbtmzp+hXj
98AiCFFvocTSeD3qxJFiy/KFl/jGOs4xTqE1Gk1bW5tJXs1Jdh0ZGWnxcRLG
3HjjjaxldmMSuvz8/IaGBhM3hoeQquyrPnjYAW0SUqrizbeDcRLSfmJyRVT6
jR071sH90eBRi9gyQ+Jt324bkWIhuzNYMcJXyG3ImIfO3d19/fr1jm851I/o
ejdt2kTFlLV95YV2TDfJ0RamG4MVI0SViSGTk5PjBJ2RSqd//vOf4kMiJwfd
V1ZWiuukxsbDL4LmbovPbjBAMzsn+2soXGvXrhWP6uLFi1nL7N6+LS7y+PHj
PCza7zMhISEvv/yy+DWmpKSwltnN3LlzxXVed911PJxZHRGsPrFXbPnlycMc
rfanhFk8qs3Nzaw12u6Gb7zxBg9rFO0hyE/9/FaxNc/0SoszbR4UgdraWiHr
cNiWpRkzZoiHfdu2bTw8aMk8TeJ2hYyq546heFQ7OzsdoNZQfVAHz8zMNBk5
42zdCH7nXt8wWyvzeca4YdC1UxCoBHNwAWgPERERJg9XMofqLNYyuzEu/Wpq
aqg4osQ4LS2Nt5CqelLlU6dOiUd1wYIFrGVe1Ep9fHwaGhpKSkpKS0s5DGk/
Mb6c2NjYSy65hAqEOsdC/chgUNMkO3v2bPMzE1Jjbd9uGxJv+imajFpaWowN
cBrkWxyLXq+ni3JwSImNGzcarnrDhg2TJ0823ySbN9S2zWW+7ig6OprGbeOo
0mU6+Oo6Ojra29udoCe69JhLIuPh/v37eVh2oupZRfDNN99Y00kDe0JCAmuN
3dA8+Nvf/lYkpFdffbUDNqfbSXx8vMVnXgt8++23PKw8oYFU/OhpHta19gfq
huJGx7Fjxxywft4eKIk6ceKENZ1nzpzhxDhyc3XZslzsASW3dnjwc2g8JT8n
T560FtWffvqJh5Un1A2PHDki0kqXLFnCz+NfbTJjjNh+kOPbfUIDLF+LYMs4
zJARfxDe2bNnBw8e7BglNrFpyLAWeAHqUD/++KO1qP7888+O2QO7bNkyi1aM
QJCveu/Vlp95LbxWlLppFNPhLGDSYGjuoBKJ+hdvpS4ldTZ3Dubk5LCW2Y0Q
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
h/qElu4jFxsb26NHD6+fbnxub9vQgWaRSMjIglxCBgAAgAYsKcV+tmpsNhuc
jIBAyOgOhIwRQMgYDXuScq9evagCU2lbrVb3/7agoGDz5s2jRo1asmTJ4MGD
jQtSOjIyMqgwe/bsSWW7bNmyFv3tkCFDNm3aVFxcTN9I+9yGDmgDIaM7EDIA
AGAOAgMDKSmlVIp3IMJhs9lWrlxZVFTEOxDwMxAyugMhYwQQMh6AuoKNGzey
p8y06KnKc+bMYX9VXl5uXHiSkp+fz56HQrRop9/Kykr6E/pb6qWNCw/IC4SM
7kDIAACACQgMDFy8ePHQoUN5ByIocDKiASGjOxAyRgAhYzQ0eFVUVGz+idLS
Ujf/kL4XReMQI0eONDROuQgLC6uqqlIKx/3cICoqarMKbMIGHIGQ0R0IGb7Q
MBQbGxsdHU3/pc6Tdzgu8fb2ZkHGNNGiBaUeJigoSCnS4OBg3uFoQcXIypMF
TIXMOyLnhIeHs6+e/ivFXuUthX0RcXFxdIJUf3iHowX1EnFNUMqk/j19L4sW
LRo2bBivwOzw8/NTilScOsOcjOOTp2gOy0o1IiKCS2DuQFOP2CYE74HdgbW4
+fPn03chUYsTtosmfH19qUhXrVpFSV1AQADvcJqBGhorVZH1EWtxFOTq1atD
Q0N5h2NmsrKy2JIMxpVXXulmF9ejRw/lr+rr68eOHQt1ptCrVy8a75TyWb58
uZt/WFRUpPxVdXX1yJEjqXsxNFQgHRAyugMhwwsfH5/k5ORt27b95z//aWho
OH/+/J49e6j/FFDLUE4yffr0N998s6GJDz74oKKiIj4+nndc9tBAnJGRsX37
9tOnT1Oc9N8dO3Z06dJFzAGaCnDx4sXvv/8+K9W33nqLWiLlfrzjugRKmwsK
Cp5++ukLFy5QkN9+++1vfvObjh07muZhZzTDSkpK+uUvf3no0CE6x+PHj+/e
vbt79+4hISG8Q7OHZltjxow5ePDgqVOnzp49+89//rOsrIztc+7v779w4UL6
V94xNkKZW2pq6s033/zll19Snfnmm2/uvvtu+o0gk0TqYClHpVrN/pc6t8sv
v/y1114708Srr746ZcoUO9nFHaqNVCcffvhhGiwuXrz48ccfb926lToQGZsh
tbjExMSrr776ww8/vPfee994443HH388Ly/PZrPxDs0ealwjRox48cUXqcX9
+OOP1EWLOfBRLkGJ8Y033vj5559TRkEDNA2CNPAFBgbyDs0J1OKoiVFDYy2O
mh41wBbdTOEBgoODs7Kydu3adezYMWpx1157rckGPob66pUI2pw6gb59+y5Y
sGDTpk1sj1+G1eIVE25hP+Ehl3wFlDXV1dWNHj2a0mkRfCmdglKk1DB5h9NI
eHi4UqrqZ2H7WBtLNTrMEhthsQVdUqrl5eU1NTXDhg2jrMPj8doTGRnJLlyK
fNVSF3x9vKJsjd9IgJ/op0lfxLx58yiv4x1IM/j7eVOR0o+fr+hFSlCnRx2a
4JW8Q4A3VdFIm8VqlsGQhnVKQZmKUUNDP3WDQjkZ6gafeuqpBgdef/11oVJT
Sj4vu+wymqjaxUmJdGlpqWipKRUdZaSOpbpv3z4RRkAGjeMbNmxwDPLo0aM0
PTRBakr9Hk1baBbj2AwrKyvp9HkH+DOUitx1112O38Vf/vIXSkQp1xo7dizv
GBvx9fXt37//999/bxcnzbwoZxakGUZERFRXVxcUFFDO/OSTTzqW6mOPPSbO
DJEy/IULFzIjqubw4cM0Z5SuGaanp3/66afsFLZv3/7ee++xFldVVSXU8iRq
cbfddptj3aB+W6hnaFKLo5p8/PhxFt62bdu+/fZbekFD4bhx40RbfUSjGzUu
x1Ldu3evOC0uNDR09uzZ58+fV8L71a9+derUqW+++cYcA59X0zlS7/Hggw9S
gkQn+MMPP9x8882dOnXy8/PjHVojNPgq6iA+ylo/w/+zXaEXng+jn5f+EDy4
ly/NCNi/ZmRkCOI9oqKi+vbtu3//ftZXHzly5Oqrr6azEKfCME3k1TgB8UqM
tv5iUcA3u21UpOf2hz19fXBBpg9Nspr+1UKlKsIiTIp20qRJ6mvB5eXlQs07
9CI0yLtzgvV/lgf+7dYQ+rl/c1B+Vx+lkguF908wIcNe8w7KCVSZu3f2uXNt
B1akt9QGdu1oDQ8RMVSvn0pVETJilmpMuGVwnu9jW4OoPP96S8hV8wM6xlg7
BAgXZ0uhjI5mtY5pCWPkyJGCfBdhYWG33HKLqzifeeYZcdYb08za0cYwKOXI
zMzkHeDPUKE5nQYybr/9dhGMHA3KpaWlroL8+uuvRVvM0wqoGX7xxReuznH8
+PGCNENKnn/zm984DfLcuXO/+93vpk6dyjvG/0LT7ZMnT7pqhjSd4R3gf6E2
WFtbS3MQV9/+9u3bRejcqAYOHz7cVZA0Q0xKSuIdYwugFqfYmAaVkGFMmTJF
hFmAV9MCiS1btrgq9r/85S/i2ANKiWk2rcSmCJmGpmW3Qj0eJSIi4u6773ZV
qrt27RKhxRGDBg26ePGiOjYmZBqa1oiy5whLTUhIyIIFCxwdL3XddO5C3ZzS
Kd764c7/qhj1z5+u7BBlE2i6SlV369atjrX6q6++okmWIIkEg2LJ6uTz1SM2
x1K9emFARKgopRoTE7N3717HIn3jjTeEUuJth8q85nL/c/vtv477NwfRFJh3
dJfgrUItZISq4UR0mOXmmkC78jz/XNi15YFC9RsMpQzthIxQpRofaX3+d8F2
RXr6mbDpQ/1DOwgUZ0sJCAigOZSrtIT47LPPBJHAXbp0sctM7BBkh0waDfft
26cR54svvijObQh9+/bVCJVQL9blBQ15X3/9tUaQ11xzjSBX01oHpZ2bNm3S
OMEvvvhCkHGfRj315VqFc+fO3XPPPQ899FBxcTHvGBux2WwUjEaRHjhwQJxm
2K9fv+uvv97pQjVGdnY27xgbl9J9/PHHGkVKswAR7jVwB6vVunr1anXwdkKG
OhxBWlxKSgo1Lo1iHz58OO8YG6GZNZWhOjC1kCFee+01cZZcZmVlaRQp0aNH
D94xesXFxSn3ESsoQoag5E2Quy9bTWFhoau87sSJE1T5eQf4X+IiLP+6K8TR
G7Cfmun+gtzZ4ePjM2vWLFe1mvJ5cfwtkRBlVZYbOf5MH+Inwp0IYWFhGpdL
9u/fL04i0Ub8fL3njPR39XXcs66DOIrM+1LshIw49iA0yPLrCnsbo/zUX+Ev
1KIOdQE6ChlBSjXKZnlhm72NUTRXSZ6vGGG2Bso51SmTUwS5lLxx40btOO+9
914RkpPk5GRtcUT/Su/hHWYjNHu64447tEt1y5Yt3Jth7969tYP88ssvBdGG
rYOCV1+sd0peXh7vMBtZsWKFY2znz5+n1vfggw9S3b7//vtF2CgpKSmJLYDX
QJBs32q13nDDDUePHr3++utp0uo0VJqFcV+wkZ2drV2eX3/9tSzNkKa6H3zw
gTp4OyFD9OnTh3eYjZSVlWkX+6OPPirCjvHU4tiGaQp2QoYQZN9Fi8Vy7bXX
apfq7373O+63n1BK7BiYWsgcO3ZMEG3YOmJjY//9739rfAv33XefIFuozR3l
cqJKPyeftiXFCLGgLjEx0XH/ATWrV6/mPpQwfK1eG+cGaJTqN7ttCVH8Q83I
yNBO6U3z4KfEKOt3TzpZraT89O4mxB15XvIImS4dreefc1meZ54NS4njX8MZ
dkUqrJCZNMhPo4p+uis0PlIUbdhSaEqinZY0NC3e5h1m464slHZqx/nGG2+I
cAGu2UtvDcI4rujoaI2L8ow9e/Zwz/Znz57dbJFKvXibgm/2BOfMmcM7zMaV
PJQh2wV24cKFnTt37tq1iyUtb7/9tgjX4Lp06dJskebn5/MOs5Hw8PAXXnih
oWlDpOuvv576McdQ9+/fz32n2UmTJjVbpII4rmahaYtd5I5Cpry8nHeYjerg
zjvv1C7zQ4cOieDBaNpiF5ijkOnfvz/vMBsJDQ195plntEv1wIED3PcRGjNm
jGNgaiFDiL+VpQZpaWna38Lp06fVW7/yIirMcvB/nV+TVX6mlAixRnfQoEHa
RfrBBx8Icot3XKTlo/tdLo9hP/2y+RuAdevWaRfpjh07BNmSro1cPlTLOjYu
klkfFOjfzKycxiyj16t7O+AoZDxgD5rd2tFq9frVEpfLY9hP9XT/ZiNlD4LU
LW4XuCNkPFCqNH3QOEqkzXLgxma64r4CdBqtQxYh06FDBwgZ3ZFFyMyZM6fZ
IjW9kKERh3eYjc+Pvv/++9VRXbhwgX6zc+dOZROAd955R4R8r2vXrs0Wae/e
vXmH2QjN+1566SUWkisn89xzz3HfzYkGgmaLVBYhk5SUZBe5o5BZvHgx7zAb
MzGNrU4YH330kSxCZsCAAbzDbMRms2nfVkwcPHiQ+zYyl112mWNgZhIyzdoD
Ij09nXeYjXfWfPu41soB+qGZF+8wG6msrNQuz4sXL4rguIikaKt2kdJP+XjO
i94DAgIefvhh7SJ98803RZh6tBGaBN9S20H763jn3tC4CJcrOnx8fPr27VtV
VWX0SkhBhMy4ceOoufXo0cPVXtmRNsuLf2jGHuy+NkjjriVfX9+ioqK6ujoa
Cww7j/8iiJCZMWPGypUr8/PznZYqdcUnn26mK145VY4b5x2R5ZYlqga4ZUl3
cMuSIFDw33zzjfY5FhYW8g6zEfXOGxcuXHjggQd27Nih3lVm9+7d3A2eV5Pj
ctwo0g5B5jI05qq3Kz9y5Mj111//z3/+Ux3qjTfeyP0Giry8PO3yPH78uCw3
UFCLs9tD21HIDBw4kHeYjaxatUq72J9++mnuq6e8mhyX3V43jkImLS2Nd5iN
WK1Wik27VG+77TbuO8rm5OQ4BqYWMidOnBBkct06ZBEy8fIImWXLlmmXpzhC
JlEGIRMYGNhOhIyP1Wv7hmaEzMcPOL8fRFExm5toP0KGna8rLRMdZnn1Vpcb
T7GfZ24IDg1yEqqiYtgh2pWQYafsVMskRFkdd5y2+1k/h78HaB0BAQG///3v
NboayloFmeo2e8lbkPw5MjLyueee04jzpZdeEmcTsH79+mmXqgjPhKJZnrav
2Lp1q9Sb+vr7+//P//yPxgmKs1eAcj81/ffPf/4zTWPt9vgV5JnXERERzz77
rEaRUhIlwq1VjIKCAnVsX3311XXXXad2MiLcXdXs3tq33HKLCNsHuQN1F3YP
IrETMsePHxdk2pKWlqZt+CdPnsw7xkbCw8P37NmjDsxOyAiydo7Rq1cvjSIl
aGTkHaMTbdhwqZC56667RHuYeIuQ5pYlG25Z0h93blkS4e6D9nPL0uqZzdyy
9Py2YMd9fTt37rxs2bLNKpYvX17uQSoqKjZt2rR27dorPcuGDRvUZ71o0SK7
/KeDv/cDVwVpF+mNVYGOWzpRr04ntZk3VKq8Q9g8d+5c9eSOOo1DzXUak4qF
6IpbR3JyssYmYBMmTOC+QIJBM6x7773XVZwvvfSSOI66e/furp6LQb8X4fEN
ClRozz//vKtS3blzJ/f76L2aLmjOmDHDVZBHjx6V63m7TqHZ7rFjx1yd46xZ
swTZiC8sLOz222+nGeIjjzxC0wG7ev73v/89Ojqad4z/pWvXrq729aX4Bblf
iREZGfn000+rI2RO5s0336TXTzzxBPe7J7ya7g3XuGvpu+++k6sZ0kTvyJEj
Svx2QobSPEEcL7W4m266yVWxv/XWW+J4xS5dupw9e1aJTS1kqMUJcsWEQd0U
NStXpbpv3z4R+jFqcePHj7eLTREyQj2EqHVQ+vH222+7+hYamjIQQTb1nTda
a6566pkwEbaf9WqSeMePH9coUpq3CpJL+Fi9Ns/X2tT36GM2EfbnTE9P1yjP
BhNt6pvZyUd7qls2zsnNIDRDzM7OVjsZSq4SjCTRARqvKd/rcCmBBjNp0iR2
vmvWrCkpKXF6NWpsP60daOmnX45z5UjpR1FR0ZVXXskO4fkVMhkZGZdffjnH
FTLV1dX5+fl2nZWvj9evNbfl+XF/WHKsEP1b66Dz7dWrl1MnU1tb2+y2RZ6E
Ms+nnnrKMc7XX39dkPUDDGqY1HzUqSmDpoelpaWiXUSmEdzpTjKUlIqT6kdE
RGzYsMExyKNHj+bm5rq6hVMiqBkWFBT88MMPjuf429/+VgQtpkC14tZbb73z
zjvtdMehQ4cEuRePwUZMRzVKc8PFixcLkucrUA/G9IsCczKPP/64IGsUvZqa
odPH05w8eXLAgAHcb6pqEdTiaLj/7rvv2Cmohcz//u//irOI0atp3up0z5OP
P/5YkOcWMajFjR8/XukWFCFDLW7FihXcN0Gyg5oVZQ6OpfrWW2+Jk05Qi9u0
aZM6vK1bt54+ffrUqVPFxcWCOMO2QJNZVwvA6BwFuceNiI2wvrfD5ZXZDXMD
mt3s1DP4+vrS5NRpeRKHDx8Wp257NT3W5/DDLu8Fmzva30eAqRVNgu666y5X
RXrw4EER5K0uRNksT17nciXYlw/bEqJcZtpqLeOBUanZW5aMDoCgwU5DxTDi
Ii0a/cZrfwyJCdeavChaxgNCxkuMx17PmDHDqYpRSIm1fr/XZadxY1VgcKAQ
XXGroUSaWtAdd9zBstPz58+/8MILhYWFomVQXk2PK50/f/4777yjZKQ1NTXi
TFgUqIVSfX700UfZk0Dpv4899lhmZqZoNoZBBUhN4KOPPmKl+u677y5cuFCQ
da0KlJrSpO/AgQNsb5D//Oc/t9xyS0pKiglsDINSKRpT7rzzTmVF+quvvjp8
+HCh5oZeTXfOUsq3ePFipcIcOXLkqquuEmFtuR1BQUGUJFDTY1qGas6zzz5L
XX1oaCjv0JxAzbCuru7LL79kpfr555/T/9JYnJOTwzu0n4mMjBw8ePArr7zC
gqSebfv27TRvknFuyAa+P/3pTydPnmRC5u9///vo0aMFTLCpN6Y+WXlU97ff
fvvLX/5SwCVJNMDRMPfII49Qi9u2bRv1DPv37y8oKBBhlxtH2MBHDY2VKjW9
+vp60dIJanEDBw6keZ8iZHbs2JGRkeHvL+vWhWpCQkKoYjvu93XixAk6a6F6
ldR464c7ncyt/nRlB5rJ8o7uZ6jC/OpXv3JUB1999RUlpYKseGdQ7pad6vPV
I06mV1cvDHC8O4YXsbGxe/fudSzSN954QyjB1XYSoqz/d7eTbU+OPWHr3tmn
2VybXebw/COBuAgZ6oTdySQzkqxfOrOOH90f6uYzr2lU9cyVF20h44EAvJru
Y9Xu9v18vIp7+p56xomNefH3wdqCSyICAwOp26Ecj3I/AVWMAlUMSpjZ0jVq
+IIsv3QKzQepMFmRirDTqQbswWqsVKl4hRq11YSHh7MipbpqjozUDkpQaUZA
3S+dI30RoummUaNGLVq0iEre19eXvoLk5OSUlBQKWIT9tF1BdYYipPGa6rYI
9/5oQCMRVW8qUipYekH/S5HX1tbS4Mg7tJ9hPXBiYiLVUipSMe2W+1DPTIVM
s8L+/fsL2OIUfHx81C1O5F0LWIurrq7OysoSzSfbwVocK1XW4nhH5AR1i1uz
Zo04d2frAnUgPXv2fOaZZ9jaqhMnTtx33310pgJ+F4nR1mvKA5RFHa/eGjK2
n1+kMN5AgRod0+bMdH377be///3vqUkK2LlRRB1jrTdWBR59rLFUz+0PO3Bj
cFGub3iIWKFS5zB37lzlDrtPPvmExmUB1X3bSYiyblsZqEx4zz8X9uR1wWmJ
VhFWK6nREDK8Q7sEquEpsdY/Xx3040+70Z7dF3bH6g5JMYIVaBOuhAzvuC4h
wM87O9Xn5Zt+Noff77VtmBsQFyFWpwEAAAYxcuTIsrIykd2LKRHQyZiPGTNm
dOnShXcUpmL58uWC+08ZufLKK0V2ca3GZrOxKxE08xVzITHD18crNtySHGtN
jLZGirQwxpGIiIiEhARmGgW/euXv6x0XYU2JsyZEWUVTMQrMiyYlJXXs2FHw
a8FtJDjQOz7K0jXZ2i3ZmhRjFWepkiN2QoZ3OC6hWk09BhUp/SRGWZ0+WUkc
7IQM73CcEx1m6Rhj7ZZizehojY+0CnLTKAAAGM2IESPKy8thY7hAeXVtbW3X
rl15B2JaIGR0B0LGCMwqZMSEJiOdOnVycyub/Px8MW/NEw2r1ZqRkdGxY8dm
32mxWHr37i348nLAnXnz5gm1nZoJoGzziiuu4B0FAACASygpKVm8eDEmAhyh
9LW+vh5OxiAgZHQHQsYIIGQ8gNVqpZ524sSJ7Cknqamp7vwVvZ/eXFlZScOl
UI/DEAQ/P78ePXpQT7tu3ToqKDc7hzlz5tCby8vL+/btCzMDnAIhozsQMgAA
IBqDBg1aunRpUFAQ70DaO3AyxgEhozsQMkYAIWM0mZmZNTU1yjN8qct1c+sV
+kPlrzZu3Dhr1iyR773yMPn5+VSSSvlUVla6+YcFBQXKX61fv37q1Km+vr6G
hgqkA0JGdyBkAABAKAYOHEi5E2yMIDAnA3WgOxAyugMhYwQQMkZjsVgmT56s
SAD3Hzjr4+OzZs0aRcgI9XQ87vj6+s6dO1cp1ZKSEjf/MDg4eNOmTeyv1q1b
l56ebmSYQEogZHQHQgYAAMRhwIABy5YtwzphoUhOTq6vr8/IyOAdiKmAkNEd
CBkjWL16NTbyMpqUlBR2Ww3RuXNn9/9w6tSp9CebNm2qqKjw8fExLkIZycrK
2rBhAyvVFj0pbMGCBcxxzZkzR8AHRQHuQMjoDoQMAAAIQkFBwYoVK2R/qLEp
SU5Orqura9FMAWgDIaM7EDJGACFjNKmpqbW1tSkpKVOmTKFutkUGICcnZ8OG
DdnZ2ZMmTZo/f76AT+7mBZVMdXU1e3i0+/crMfr167dmzRr6XqiXnjZtGpwM
sANCRncgZAAAQAT69OmzcuVKPDNCWGi+QJMFN3ebBM0CIaM7EDJGACFjKMzG
sAcA+fj45ObmtujP6avJzs72+um+p9mzZ2OdjNdPNiYqKope+/v7syJyn/Dw
cHb1wdfXd86cOVOnToWTAWogZHQHQgYAALjTu3fvVatWhYWF8Q4EaEE5an19
PZyMLkDI6A6EjBFAyBiH2sa0HYvFMmXKFDiZzMzMqqoqZmPaDtuLprS01Nvb
W5cPBK6gopYlCZRIyMiSZsglZHALPwDAfPTo0YPSJ8ykpCAtLa2+vl6WVERk
IGR0B0LGCCBkDEJfG8OwWq2XX375rFmz2q2T0dfGMHx9fWkCPmHCBDgZQxkw
YMCkSZN4R+EWsgiZxMTEDRs2SKG5JBIy3bp1w7AIADAZubm51dXVmEZJBJyM
LkDI6A6EjBEg8zQCI2wMw2q10rxm+vTp9EL3DxccI2wMw8/Pb/78+ePHj9f9
kwGDSpjyio0bNxrx9emOLEKG0owWPbiNIxIJmcWLF1OpFhcX8w4EAAD0QX2j
N5CI9PR0yp1SUlJ4ByIxEDK6AyFjBBAyusNsTHJyskGfb7Va2+FutN26dTPI
xjCoFZSVlY0bN86gz2/nDBgwgD0PS4pFMlIImcTERFakUiySkUXIUD/DShUj
IwDAHFC3RklpbGws70BAa0hPT6+rq0tKSuIdiKxAyOgOhIwRIO3UF5rHGWpj
GO1tN1pKJ2pqaoxOJ6ghlJeXjxo1ytCjtEPY8hg2z5VikYwUQoYtj2GIv0hG
FiHDlscwsEgGACA71PdSUhoXF8c7ENB6MjIy4GRaDYSM7kDIGAGEjI54xsYw
2G60EydONP3OJ56xMQzmZEaOHOmBY7UflOUxsiySEV/IKMtjZFkkI4WQUZbH
YJEMAMAE0DyUktL4+HjegYC2wpwMDf28A5EPCBndgZAxAuSceuFJG8Ngu9Ga
+wlBnrQxjKCgoKVLl44YMcJjRzQ9mZmZ+fn5kyZNmj9/Pr3Iy8vjHVEziC9k
QkJCEhISKMh169YlNNGhQwfeQWkhhZCx2WxUkllZWatWrWKl6u/vzzsoAABo
DTSFr6+vx7IK00CpFH2hcDItBUJGdyBkjABCRhc8b2MYbDfaCRMmePi4noHZ
GM8vtWVOpqSkxMPHNTe9e/cW/84ahvhChuHv779mzRreUbiFFEKGERUVtWzZ
Mt5RAABA60lNTa2rqzPi0RKAI8zJJCQk8A5EJiBkdAdCxgggZNoOLxvDMOtu
tLxsDCM4OLiysnLQoEFcjm5KIGR0B0LGCCBkAABSQ+NXXV0dr6QUGEpWVhZ9
uXAy7gMhozsQMkYAIdNGmI3h+0w68+1Gy9fGMEJDQ1esWDFw4ECOMZgJCBnd
gZAxAggZAIC8UDpaX1/fuXNn3oEAo4CTaREQMroDIWMEEDJtQQQbwzDTbrQ0
d+NuYxg2m23lypUDBgzgHYgZgJDRHQgZI4CQAQBISmJiIk3V09LSeAcCjCU7
OxuPMncTCBndgZAxAgiZVpOSkiKIjWGYYzdacWwMgzmZgoIC3oFID4SM7kDI
GAGEDABARhISEurq6tLT03kHAjxBdnY2ZcsxMTG8AxEdCBndgZAxAgiZ1pGU
lEQ9oTg2hiH7brSi2RhGREREdXV1nz59eAciNxAyugMhYwQQMgAA6WA2JjMz
k3cgwHPk5OTAyTQLhIzuQMgYAeXzeLJnS0lKSqqtrRXzFl15d6MV08YwqOep
rq7u3bs370AkBkJGdyBkjABCBgAgFzQlp/QpKyuLdyDA0/Ts2ZPmI3AyGkDI
6A6EjBFAyLQUZmNEvkVXxt1oab5GpRofH887EJcwJ9OjRw/egcgKhIzuQMgY
AYQMAEAioqOja2pqsrOzeQcC+JCXl0f5M1UD3oEICoSM7kDIGAGETIsQ38Yw
2M4nRUVFvANxC/FtDINmapT25Obm8g5ESiBkdAdCxgggZAAAssBsTM+ePXkH
AniSl5dH1QBOxikQMroDIWMEEDLuI4uNYciyG60sNoYRGxtbV1fXvXt33oHI
B4SM7kDIGAGEDABACiIiIqqqqmgyzjsQwJ9evXrV1NTQ+MU7EOGAkNEdCBkj
gJBxE7lsDCMsLGzVqlUi70Yrl41hxMXF1dXV5eTk8A5EMiBkdAdCxgggZAAA
4hMeHl5VVUXTcN6BAFGgykBVIiIigncgYgEhozsQMkYAIeMOMtoYhsi70cpo
YxgUM0VO8fMORCYgZHQHQsYIIGQAAILDLrcVFhbyDgSIRX5+PpyMHRAyugMh
YwQQMs3CbEx6ejrvQFqJmLvRUvcoqY1hUK2or6+Hk3EfCBndgZAxAggZAIDI
sAc39O3bl3cgQESoYlRVVYWHh/MORBQgZHQHQsYIIGS0kd3GMETbjZbZmISE
BN6BtImOHTvW19ejn3cTCBndgZAxAggZAICwhISE0GyoX79+vAMB4gInowZC
Ri/8/PzCm1i5cmVqaiq9CAoK4h2UeYCQ0SAxMdEENoYhzm601DFSJElJSbwD
0YHk5GQ6F+qXeAciARAyugMhYwQQMgAAMQkODqbeqbi4mHcgQHT69eu3atUq
OBkvCBn96NChA+Wcm1VkZWXxDso8QMi4wkw2hiHCbrTUK9bX13fs2JFjDPqS
kpICJ+MOEDK6AyFjBBAyAAABodlQRUXFkCFDeAcC5IA5mbCwMN6BcAZCRkeG
Dx+u2JglS5bwDsdUQMg4xXw2hsF3N1rz2RhGWloanVdKSgrvQIQGQkZ3IGSM
AEIGACAaHTp0oOnP0KFDeQcCZKJ///4rVqwIDQ3lHQhPIGR0RL1IBstj9AVC
xhFmYzIyMngHYgi8dqPt3LlzXV2d+WwMIz093TT3YRkEhIzuQMgYAYQMAEAo
AgMDlyxZMmzYMN6BAPno37//8uXL27OTgZDRF7ZIBstjdAdCxg5z2xiG53ej
NbeNYVCdoXOk+sM7EEERX8gEBARkN1FZWVlSUkIvBK+xUgiZhIQEav7FxcUL
Fy7s3ISvry/voLSAkAEAiENgYODixYvHjBnDOxAgKzT+Ll++PCQkhHcgfICQ
0Re2SAbLY3QHQkZNe7AxDE/uRtsebAwjMzOzvr5e9qdHGYT4Qsbb27uiokKi
/cqkEDIFBQXqIi0rK+MdUTNAyAAABIE6+YULF44dO5Z3IEBuSkpK2q2TgZDR
nfz8fEqYeUdhNiBkFNqPjWF07ty5vr7e6FszmI1JTk429CjiQFN4Ot/4+Hje
gQiH+EKGyMnJkWi/MimEjI+PT3V1tVKq3bp14x1RM0DIAABEwM/Pb8GCBeKP
m0AKBg8eTENbO3QyEDJACtauXUt9Pu8o+NPebAzD6N1o25uNYWRnZ9fU1MTE
xPAORCykEDLqRTKCL4/xkkTIeKkWyYi/PMYLQgYAIADMxkycOBFXooFeDBky
hEa34OBg3oF4FAgZIAUQMl5NuxzU1dVlZmbyDoQDxu1G2z5tDKNnz561tbXR
0dG8AxEIKYSM10+LZMRfHuMlj5BRFsmIvzzGC0IGAMAb6jPnzJkzadIki8XC
OxZgKtqhk4GQAVIAIdOebQzDiN1o27ONYeTl5dXU1MDJKMgiZNgiGfGXx3jJ
I2S8mhbJSLE8xgtCBgDAFR8fn9mzZ0+ePBk2BhjB0KFDKcnp0KED70A8BIQM
kIJ2LmRgYxj67kYLG8Po1atXVVVVREQE70CEQBYh49W05bUUq8QlEjK+vr6e
2UK87UDIAAB44ePjM2vWrClTpsDGAOMYNmzYkiVL2omTgZABUtCehQyzMVJc
CvcAeu1GS9Mu2BiFwsLCqqqq8PBw3oHwRyIhIwsSCRmJgJABAHDBarVOnz79
iiuuoBe8YwEmp/04GQgZIAXtVsjAxjjS9t1omY0xbpdgGenbt++qVavCwsJ4
B8IZCBndgZAxAggZAIDnsVgs06ZNo8kjbAzwDKNHj16yZElgYCDvQIwFQgZI
QfsUMrAxrmjLbrSwMa7o16/fihUrQkNDeQfCEwgZ3YGQMQIIGQCAh7FYLFOn
Tp05c6aPjw/vWEA7YsyYMYsXLza3k4GQAVLQDoUMbIw2rduNFjZGm+Li4uXL
l4eEhPAOhBsQMroDIWMEEDIAAE/i7e1dWlo6d+5cX19f3rGAdofpnQyEDJCC
9iZkYmNja2pqYGO0aelutLAx7jB48OD29rRBNRAyugMhYwTmEzK+Vq+YcEtR
ru/EQX5j+vklRFlDgwTdLzQyMrJr1640OZ04cWL37t2FfUodTV7i4uKGDRs2
efLk4cOHU14h8nSGijEnJ6e0iW7dulEh847ICbZgS1K0dWw/P6ql/XN8qcb6
mO7GHe9LUX45YcKEefPmiWNjqMJ07tx5yJAhI0aMoPZIVZ13RM6hETAxMTE/
P59Si8LCQnot8o4o1EtkZGQMa4JetGVzAN0ZO3bsokWLqDy9XNRSSWGnMGPG
DKrGIp8LZR00jaIWN3LkSOqixW1xvt6J0dZeXXyooy7M8qUeOyhA3FKlJpae
nq60OGqAvCNyjtLW1q5dy9pge4DZmOzsbN6BSID7u9FSN1JfX0/Dtweikh3q
b9vV0wbVQMjoDoSMEZhMyETZLGXj/I89YbvwfBj7Obc/7PbVHRKixJru+vn5
ZWZmvvrqqw0q3nnnnT59+gQFBfGO7hIozbv66qvPnDmjxHn27Nlf/OIXAuZ7
gYGBNF19++231aX62muvURYk1JU4SvK3bwg6/1yYUkuP7LbNHukfaRPUHLYU
b9eMHz9+/vz5gnwdFouFMrrnnntOXWGo/vTo0SMgIIB3dJcQHR29YsWKU6dO
KXH++OOP69evF0p0MHx9fWmW/frrr9s1w65du4pj4caOHbtw4UL6lp3WUt7R
tRh18IqQEfBcqMV16tRp37596rrx3nvvUb8tmuSPCrMsnuD/w96fc4mz+8I2
zw+ICReul/bx8enSpYtdOvGPf/yDmqEgPS3DrpUxISNgLW0jjp2JgDaGWiKN
Hd27d6cRecSIESkpKUI9jke9G62r/pnZmLS0NK6RXoLVaqXvOi8vr7S0dOjQ
oUlJSTabjXdQP6PsbG+CIc996OxoYnXZZZcJfqbRYZZOcdaUOGuneCu9FjZS
VoyUO61Zs0bk8vRqDLWxVFPjG0uVfoSdYSnNkPJ80wgZW7Dl2vJAJX1S/7x5
Z4hQeRQNzSdOnGhw4Ny5c4MGDRJnm9PIyMhHH33UMU5iz549Qi0+oQRjwIAB
NEt1DPXkyZOUePAO8L/ERljevifUaS3dODdA2NVcLcLpJJcYPXp0WVmZOK4j
PT39yJEjjhXmzJkzAwcOFGd/G2pot912m9NmSM1TqJV11Ax79Ojxww8/OIb6
/fff5+bmCjKCUxiUoblyMryjazHq4O2EjFCn07lz56+//tqxblC/PWTIEHF8
XWSo5fcrnecSe34dTDke7wB/hr5fGt2ocTmWKuUYNDekJsk7xkYcW5layAhV
S1uN01FPQBtjs9lGjRr1+eefq2vLU089lZqaKkht8fppN1oK1WmpUk8imo2h
YXrmzJlHjx5VivTixYs7d+5MSkriHdrPDB8+vP04GeXU1EJGwDONCLWM6OP7
b9W84N3toWP6+QkoEJQyVISMmEXq1SS4pg3x++j+n0v1H38KKcr1tQWJFa26
DTIhI2yRtojCLB+nGRT7+Z/lgYKsN6YB+oMPPnA6vSKOHTsWHx/PO8ZGrFbr
3LlzXcVJLFq0SBx3RIXmdHLN+Oijj0RY0hPSwfvWug6uquj558J6ZogiAVqN
0/SJoAywvLxcnOvgVB/+9a9/uaow3333XWJiIu8YG6GimzRpkkYzrKioEKoZ
fvHFF65C/eyzzwTp3FidpCRtwYIFsjsZu8iFFTLU4uzWTak5ceKEODMXSoY1
colVU/19hemnqUF9+umnrkr18OHDQrU4NSYTMk5Hvbi4uJqampycHHFOkLq7
mTNnXrx40bG2fPPNN8nJybwD/JmSkpLly5eHhobalaqAa2NCQkKuvPJKp23w
ww8/FOeuTCo9toua6Z2M+rzshIxQZxoWbFk7K8DpQPOLRQH0r7wD/Bl1AdoJ
GaGK1KvpksrNNU4uqdAkq6LUPzhQlGjtGqBayIhWpC2Cyv/5bcEaSdTZfWEd
Y4SYtgwfPlxjekUsXbqUd4yNUCL35ZdfasT59ddfJyQk8A7zv5SVlWmXKg1D
vGP0So61ntvvsorSz5PXBQvVA7cCp3npyJEj2U6q4vQzffv21a4wlAryjrER
yuXee+89jTgpixanGWq7I2LcuHG8Y/y5iloslokTJy5YsEA9MZRuNLQL21HI
CHIu+fn52nWjrq7OM6EWFxdTiu5qCVxsuPWfd4Ro9NLfPm5zdRM0TXOGDBlC
E3Ajw7+EsWPHapfq1KlTPRaMK5wOCnZCRpBa2mocT1BtY8Q5u86dO589e9ZV
bXn++eejoqJ4x9gIKzS2G21ISIhSqszGpKeni1OkRG5urlPHxbjnnntEuHdJ
KUONO3Z5x6gPdiflKGTEOdOiXF+NsWZIviirRu1Kz1HIiFOkFm+v6UNcXlKh
KVhumhAXVBxbn2mETGK09UfNqS79DOrBv27TFMDV3QcK+/btE6H3TktL046T
oGGRd5iNhIaG7t27VzvUu+66i/tNKCMLtfpe+jn9TJho+x21CMcehuVUS5cu
DQ4OFqefoRhuuOEG7Qrz4osvuv+sB+Og/LPZZijIU3UCAwN37dqlHerOnTu5
7+SprpxWq9WVk+EbpJs4NjdhhcyWLVu068Zf//pXz0wGx40bt3nz5rq6uqKi
Isf7pFLirNq9NP1kptgPJTRnpI9dv349fXJ+fr4HzsKraTO67du3a5fqQw89
xH1dotNxwUxCxvHsmI3p3r27UCdIFWbbtm3aFUaQu6uUQmO70QYFBXlfamNE
KE8Gtf3du3drFOnFixc7derEO8xLaim7Y1fSUa9Z7E6Ki5Bx55lWseHWN27X
kv/v3BsaF9HMJVrKYTwwYbQrPV5Cxp3sMT7S8uXDNo1S3f/b4GZvB6OputE7
YDuOGnZCRt722Cm++STqimH8t/SnRrpnzx7tAfH//u//RLi/JicnRztOIi8v
j3eYjcTExLzxxhvaoT7zzDOhoaF841x0mX+ztTQ51lRCprCw0PFOcN5hNi7b
fvDBB7UrjCArjbt169ZsM+zbty/vMBuh2fTLL7+sHeqBAwe47z1lV0V9fHym
T58+Y8YMz2cXbcexxZWVlU2bNm2YYIwYMYJmgs9o8tBDD5WWlnogmCVLlmz+
CUct06Vj87lEcc+f369WMYxZs2Z54CwImmXcfvvt2qV69913jx8/3jPxuE9i
YqKJhQzbN8bOxohwgvHx8Rr3yzNWrlzJO8xG1OU2rKnN0lCotjGCFCmRkJBw
8uRJ7VKdMGEC7zAvKVJXq0N5x6gPdu3OqZAx+mTnzZs3Z84c7TvfO7kh/zsn
uJwR0LBFgxcNYf369TPgDC7Bruh4CZnKykqqt9qXSrulaO1ewhbJJLm+X4YS
Qsqoq6qqDF3p6lgbvU0kZKh4m63YIwv4r5ChFtTsJa2DBw9yn7MQXbp00Y6T
6Nq1K+8wGwkPD3/++ee1Q/3zn//M/dL8xEFaWxOwjsJkK2SohoSFhXm+39aG
shGayGhXmNdff12EZxhR/tlsM/TkLRIahIaGPvXUU9qhPvHEE+5cOTIUx1pK
Q3B+fr5otdQdHM+lpKRk6NChAy+liDcUw3XXXXdAk4ceemjUqFEeCKasrEyR
JzTFGzRokHpooAS42VwiT7XZl81mGzt2rFrITJ8+3QNnQQwZMuSPf/yjdqne
eeedVB88E48rBjqQlJSUl5cnY4tzivosrFYrJfO9e/d2bJu8w2xUB04fJ6Fm
27ZtvMNsxK7oSktLqYllZmaKVqREx44dmx2jRbgD2nHUo55K2Ht52oLdGVFj
HDNmjIfb47x589hwoKFlsjo1ow7sxhoFRcWwQxgtZByLjgKorKz0fM2hdkTn
u2HDhokTJ7p6MNyQXs3ciUA/6UlO5lmKimGl6nkhQ7nE7NmzTdAYY8It2vd9
009KnBBTXeoDtbtuqmwifBE0djt9doMCjeyCbF5BxbV69WrtUp01axbvMJtP
9V+5OSRKvJ3V3cdpJ+PhcdBNpkyZol1hbrjhBhE2y6Umdvz4cY04f/zxR0H2
Hyaqq6u1S3XFihW8Y5SpljaLROdCmb923bj55ps986AldstSTU1Nfn6+432s
8ZHWrx/VWvD84/6wpGj7niEoKGjYsGHr1q3z5C1LXk1XDLVLtb6+nnsFkKiW
tg67E1HveSLUCcbHx9s9XMmRtWvX8g6zEcfSi42NFbBIvZrG6HPnzmmX6hVX
XME7TCdFShkOuxdMtCJtI+rTSU5OXtJEuWehdqQo+k2bNk2aNMlxrOma3Lz8
z+pk/1dRUVErV67crII6+ZWepba2dtWqVR4uUkJ94YNGWxpzHR8M1ze7ec3l
uO4oKSmJslN1qdJpev4E1SsA9W0UnoRiv2KY1vKDPdcFR4YKMdWl2dN3333n
qt+mjj01NZV3jI0EBARcc801GkPMr3/9a+43pyt06tTJ6TOvGd9//70Ik9Yo
m+UFza2nxxf58Y6xrThNRAUc8SmJOnbsmKsKc+HChYyMDN4xNuLv709Dg0Yz
vPXWW7mvOVGg5OfMmTOuQj19+nTHjh15xyhNFXUTWU5H+0F4Fy9ezMzM9Ewk
gwcPdqpiGH6+3qtnat1betfaDqEuHp3JtExubq6R4V8CNahTp065KtWzZ8+K
8NwcWapoq3HnBEU4R0rq7rvvPo3RhCgoKOAdZiOyFKlX0wrtAwcOaJeqCPu8
yVKebUd9RtTPU7KX6ECCwSxevJjN69esWVNSUuJ0Q5KkaOupZ7S8wdl9zm+u
CQsLGzdu3MaNG9khhgwZEm4wEZcSGxtLcy4PFylRXV2ttjE04DoWTrO7wDVt
y+/EBtBYOWPGDEXIDBw40LgTcayQBOVIfn5+5miP0eGWp693Pts9+pgtNZ7/
xW4GFTg1JVdbsi9btsxpHeMCVY933nnHaZzvv/++IM/TZFChLVmyxNVoWFpa
SsXOO8ZG0hKt/3nC+eXXR68Jig4Twhm2BVlGfBqmNR5QQiOdOJYjOjr63Xff
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
    "], {{0, 320}, {1499, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{1499, 320},
  PlotRange->{{0, 1499}, {0, 320}}]], "Input",
 CellLabel->
  "In[174]:=",ExpressionUUID->"df1abc32-fc5b-4b30-a8c3-9104133763c2"],

Cell["\<\
In the terminology of the above image, the diamond step sets the midpoint of \
a square as the average of the four corners plus some small amount of jitter. \
The square step sets the edge pieces as the average of their three or four \
surrounding pieces. 
Please note that our functions are named opposite of how they are in the \
above image taken from Wikipedia because that made more sense to us. That is, \
our midSquare method is the same as the above \[OpenCurlyDoubleQuote]diamond \
step\[CloseCurlyDoubleQuote], and our diamondAround is the same as the \
\[OpenCurlyDoubleQuote]square step\[CloseCurlyDoubleQuote] above.\
\>", "Text",
 CellChangeTimes->{{3.7324494688919716`*^9, 3.732449474684866*^9}, {
  3.732449556334097*^9, 3.73244976318642*^9}, {3.732450692895256*^9, 
  3.732450694013769*^9}},ExpressionUUID->"c5ebf07d-e58b-4e50-a9ec-\
ca342504eb3b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Mid Square", "Subsection",
 CellChangeTimes->{{3.731946397127786*^9, 
  3.7319464033573246`*^9}},ExpressionUUID->"6776de65-77a8-490b-aeed-\
4f225ac46270"],

Cell["\<\
Calculate the mid point of the square with given dimensions, fill it into the \
given array and return the array.
@arg arr - a square dim x dim input array
@arg dim - the dimension of the square input array
@arg pos - a 2-tuple for the position in the square that we are computing the \
method on
@arg dist - how far away from pos to take the averages on.
\tfor instance, if we were computing midSquare in the first step for the very \
middle of the square, pos = {Floor[(dim+1)/2],Floor[(dim+1)/2]} and dist = \
Floor[dim+1];
@arg jitter - the jitter coefficient that scales the random amount of jitter. \
Typically should be between 0 and 1 (treated as a percent), but could be \
outside those ranges.
@return the modified array once the midpoint has been changed.\
\>", "Text",
 CellChangeTimes->{{3.7319464398426743`*^9, 3.731946467209932*^9}, {
  3.7324497852422795`*^9, 3.7324499971948996`*^9}, {3.7324664568112583`*^9, 
  3.7324664583652935`*^9}, {3.732469132465822*^9, 
  3.7324691605216465`*^9}},ExpressionUUID->"896a56db-2d26-44c2-a635-\
dc2386090d0e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"midSquare", "[", 
   RowBox[{"arr_", ",", "dim_", ",", "pos_", ",", "dist_", ",", "jitter_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"harr", "=", "arr"}], ",", "a", ",", "b"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "mean", " ", "of", " ", "the", " ", "surrounding", " ", "four", " ", 
      "points"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"Mean", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"arr", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"pos", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "-", "dist"}], "]"}], "]"}], 
          "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"pos", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", "dist"}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"arr", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"pos", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "+", "dist"}], "]"}], "]"}], 
          "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"pos", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", "dist"}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"arr", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"pos", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "-", "dist"}], "]"}], "]"}], 
          "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"pos", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "+", "dist"}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"arr", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"pos", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "+", "dist"}], "]"}], "]"}], 
          "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"pos", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "+", "dist"}], "]"}], "]"}]}], 
        "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"random", " ", "jitter", " ", "values"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"b", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"RandomReal", "[", "]"}], "-", ".5"}], ")"}], "*", 
       "jitter"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{"random", " ", "jitter"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"harr", "[", 
        RowBox[{"[", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"pos", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], " ", "=", 
      RowBox[{"a", "+", "b"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "@", "harr"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7319427702727375`*^9, 3.7319428644754725`*^9}, {
  3.7323657482801304`*^9, 3.732365807930995*^9}, {3.73236584881853*^9, 
  3.7323658632237763`*^9}, {3.7323659194562607`*^9, 3.7323659597063284`*^9}, {
  3.732400019310463*^9, 3.732400037392373*^9}, {3.7324000705185676`*^9, 
  3.7324000742181377`*^9}, {3.7324004077588873`*^9, 3.732400414508402*^9}, {
  3.732400445906348*^9, 3.7324004595658855`*^9}, {3.7324004913962703`*^9, 
  3.7324004940250664`*^9}, {3.732402199341363*^9, 3.732402215295413*^9}, {
  3.7324157994121723`*^9, 3.732415800678342*^9}, {3.7324158551933947`*^9, 
  3.7324158559625187`*^9}, {3.732415971165033*^9, 3.732416000344256*^9}, {
  3.7324496568789067`*^9, 3.7324496636677036`*^9}, {3.7324574410499086`*^9, 
  3.732457442426135*^9}, {3.7324641973435307`*^9, 3.7324642091078653`*^9}, {
  3.732469172986327*^9, 3.7324691968169637`*^9}},
 CellLabel->
  "In[175]:=",ExpressionUUID->"3d14cdcd-deb8-4a49-8dd7-1ec10dbc46cc"]
}, Closed]],

Cell[CellGroupData[{

Cell["Mid Diamond", "Subsection",
 CellChangeTimes->{{3.7319464232798843`*^9, 
  3.7319464276184497`*^9}},ExpressionUUID->"0647b9c7-e21f-468f-8f70-\
19e393f72ed1"],

Cell["\<\
Calculate the mid point of each \[OpenCurlyDoubleQuote]diamond\
\[CloseCurlyDoubleQuote] shape using three or four surrounding points. If any \
point is out of bounds of the matrix, it is not used.
The if statements make sure that if a point outside of the matrix is \
requested, it is not used.
Note that this is only one fourth of the diamondStep implemented in \
diamondAround. 
Arguments are return the same as midsquare.\
\>", "Text",
 CellChangeTimes->{{3.73194647045465*^9, 3.731946472416032*^9}, {
   3.731949167558195*^9, 3.7319491796300545`*^9}, 3.7321055828993397`*^9, 
   3.7323214433192987`*^9, {3.7324008168726892`*^9, 3.7324008268482075`*^9}, {
   3.7324500137989254`*^9, 3.732450056195092*^9}, {3.7324501703920574`*^9, 
   3.732450219392868*^9}},ExpressionUUID->"abcc9aa7-06f2-4310-8834-\
bd7c2860868b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"midDiamond", "[", 
   RowBox[{"arr_", ",", "dim_", ",", "pos_", ",", "dist_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"harr", "=", "arr"}], ",", 
      RowBox[{"b", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"RandomReal", "[", "]"}], "-", ".5"}], ")"}], "*", ".2"}]}],
       ",", 
      RowBox[{"p", "=", 
       RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", "left", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"pos", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ">", "dist"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"p", ",", 
          RowBox[{
           RowBox[{"harr", "[", 
            RowBox[{"[", 
             RowBox[{"pos", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"pos", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "-", "dist"}], "]"}], "]"}]}], 
         "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", "right", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"dim", "\[GreaterEqual]", 
        RowBox[{
         RowBox[{"pos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "+", "dist"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"p", ",", 
          RowBox[{
           RowBox[{"harr", "[", 
            RowBox[{"[", 
             RowBox[{"pos", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"pos", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "+", "dist"}], "]"}], "]"}]}], 
         "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", "top", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"pos", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ">", "dist"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"p", ",", 
          RowBox[{
           RowBox[{"harr", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"pos", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "-", "dist"}], "]"}], "]"}], 
           "[", 
           RowBox[{"[", 
            RowBox[{"pos", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", "bottom", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"dim", "\[GreaterEqual]", 
        RowBox[{
         RowBox[{"pos", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "+", "dist"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"p", ",", 
          RowBox[{
           RowBox[{"harr", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"pos", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "+", "dist"}], "]"}], "]"}], 
           "[", 
           RowBox[{"[", 
            RowBox[{"pos", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<p=\>\"", ",", "p"}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"Mean", "[", "p", "]"}], "]"}], ";"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"harr", "[", 
        RowBox[{"[", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"pos", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "=", 
      RowBox[{"Mean", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "@", "harr"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.731942885688506*^9, 3.7319429258834844`*^9}, {
   3.731946380270709*^9, 3.731946388046279*^9}, {3.7319488718574414`*^9, 
   3.731948871967287*^9}, {3.731948940096713*^9, 3.731948971866156*^9}, {
   3.7319490225961933`*^9, 3.731949100549947*^9}, {3.7319497293367343`*^9, 
   3.731949731015774*^9}, {3.732105596595146*^9, 3.7321056590480657`*^9}, {
   3.732105978778243*^9, 3.7321060082510943`*^9}, {3.7321060634381313`*^9, 
   3.732106158278694*^9}, {3.732106487704446*^9, 3.732106497098531*^9}, {
   3.73210662108173*^9, 3.732106765997828*^9}, {3.732400788001017*^9, 
   3.732400814463516*^9}, {3.732400858062743*^9, 3.73240090243717*^9}, {
   3.7324009534433947`*^9, 3.7324009539844627`*^9}, {3.7324009943274856`*^9, 
   3.7324010162747273`*^9}, {3.7324010873589907`*^9, 3.732401125600387*^9}, {
   3.7324011579343033`*^9, 3.7324011590290775`*^9}, {3.7324012213672543`*^9, 
   3.7324012321685977`*^9}, 3.73240132465178*^9, {3.732402169135098*^9, 
   3.73240219504591*^9}, {3.7324046947027874`*^9, 3.7324046948005476`*^9}, {
   3.732405095416286*^9, 3.7324052001064076`*^9}, {3.732405331326803*^9, 
   3.7324053399420567`*^9}, {3.732450068089277*^9, 3.732450068197566*^9}},
 CellLabel->
  "In[176]:=",ExpressionUUID->"5c0ecff8-e630-497c-b12b-62e6d714d1e0"]
}, Closed]],

Cell[CellGroupData[{

Cell["Diamond Around", "Subsection",
 CellChangeTimes->{{3.7323817580882006`*^9, 
  3.732381760699077*^9}},ExpressionUUID->"133ffd88-e695-4ae4-9370-\
3dfc30d47dc3"],

Cell["\<\
Calls midDiamond four times for the four surround points that are dist away \
from the point as pos.
Arguments and return the same as the previous two.\
\>", "Text",
 CellChangeTimes->{{3.732450195574547*^9, 3.732450203808155*^9}, {
  3.7324502401332393`*^9, 
  3.732450275932353*^9}},ExpressionUUID->"29ea162f-17fa-4bef-a47d-\
e1e120bc9dd5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"diamondAround", "[", 
   RowBox[{"arr_", ",", "dim_", ",", "pos_", ",", "dist_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"harr", "=", "arr"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", "bottom", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"harr", "=", 
      RowBox[{"midDiamond", "[", 
       RowBox[{"harr", ",", "dim", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"pos", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "+", "dist"}], ",", 
          RowBox[{"pos", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", "dist"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", "top", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"harr", "=", 
      RowBox[{"midDiamond", "[", 
       RowBox[{"harr", ",", "dim", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"pos", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "-", "dist"}], ",", 
          RowBox[{"pos", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", "dist"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", "right", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"harr", "=", 
      RowBox[{"midDiamond", "[", 
       RowBox[{"harr", ",", "dim", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"pos", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"pos", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "+", "dist"}]}], "}"}], ",", 
        "dist"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", "left", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"harr", "=", 
      RowBox[{"midDiamond", "[", 
       RowBox[{"harr", ",", "dim", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"pos", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"pos", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "-", "dist"}]}], "}"}], ",", 
        "dist"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "@", "harr"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.732327199369683*^9, 3.7323272241036167`*^9}, 
   3.7323273350585737`*^9, {3.7323273658995275`*^9, 3.732327375747555*^9}, {
   3.732327419265513*^9, 3.7323274426609497`*^9}, {3.7323275349783316`*^9, 
   3.7323276791377993`*^9}, {3.7323817908953376`*^9, 
   3.7323817930928917`*^9}, {3.73240222284273*^9, 3.73240226761578*^9}, {
   3.732404209753004*^9, 3.732404224837517*^9}, {3.732404772644068*^9, 
   3.7324047895382166`*^9}, {3.732405021327593*^9, 3.7324050383237286`*^9}, {
   3.732405068643399*^9, 3.732405074278574*^9}},
 CellLabel->
  "In[177]:=",ExpressionUUID->"1edba521-fe74-49b9-bdd6-c27df815d2ad"]
}, Closed]],

Cell[CellGroupData[{

Cell["diamondSquare", "Subsection",
 CellChangeTimes->{{3.732322096431275*^9, 
  3.732322098491747*^9}},ExpressionUUID->"157901e1-9339-455e-a0f1-\
cdf928f3c45c"],

Cell[TextData[{
 "The full implementation of the diamondSquare method for an array of size ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "n"], "+", "1"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "87466759-08ee-422f-8f15-c6b1271e8035"],
 ". We force this array size to make sure that all subarrays we calculate for \
are of odd size so they all have a mid point.\n@arg n - the power of 2, so \
the overall array output is of size ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "n"], "+", "1"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "2a7d6d45-7ad0-4e20-a78b-27b844294ddd"],
 "\n@return the fully filled array"
}], "Text",
 CellChangeTimes->{{3.7324503853519616`*^9, 3.7324504679874043`*^9}, {
  3.7324505344127445`*^9, 
  3.7324505665249896`*^9}},ExpressionUUID->"4bf185af-1219-4c1d-baeb-\
b5809aaaafec"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"diamondSqure", "[", 
    RowBox[{"n_", ",", "jitter_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"arr", ",", 
       RowBox[{"dim", "=", 
        RowBox[{
         SuperscriptBox["2", "n"], "+", "1"}]}], ",", "dist", ",", "twople", 
       ",", "tempTup", ",", "tupVal", ",", "count"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"arr", "=", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{"create", " ", "2", "d", " ", "array", " ", "of", " ", 
        RowBox[{"0", "'"}], "s"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Assign", " ", "the", " ", "four", " ", "corners", " ", "randomly"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"arr", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "=", 
       RowBox[{"RandomReal", "[", "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{"upper", " ", "left"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"arr", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "dim", "]"}], "]"}], "=", 
       RowBox[{"RandomReal", "[", "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{"upper", " ", "right"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"arr", "[", 
         RowBox[{"[", "dim", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "=", 
       RowBox[{"RandomReal", "[", "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{"lower", " ", "left"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"arr", "[", 
         RowBox[{"[", "dim", "]"}], "]"}], "[", 
        RowBox[{"[", "dim", "]"}], "]"}], "=", 
       RowBox[{"RandomReal", "[", "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{"lower", " ", "right"}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"setup", " ", "dist", " ", "and", " ", "twople"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"dist", " ", "=", " ", 
       RowBox[{"Floor", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"dim", "+", "1"}], ")"}], "/", "2"}], "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
       "input", " ", "for", " ", "dist", " ", "arg", " ", "in", " ", 
        "midSquare", " ", "and", " ", "diamondAround", " ", "methods"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"tupVal", "=", 
       RowBox[{"Floor", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"dim", "+", "1"}], ")"}], " ", "/", "2"}], "]"}]}], ";", 
      " ", 
      RowBox[{"(*", 
       RowBox[{"coordinate", " ", "value", " ", "for", " ", "twople"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"twople", "=", 
       RowBox[{"{", 
        RowBox[{"tupVal", ",", "tupVal"}], "}"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
       "the", " ", "starting", " ", "point", " ", "we", " ", "calculate", " ",
         "around", " ", 
        RowBox[{"(", 
         RowBox[{
         "the", " ", "midpoint", " ", "of", " ", "subsquare", " ", "we", " ", 
          "iterate", " ", "over"}], ")"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"count", " ", "=", " ", "tupVal"}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
       "how", " ", "far", " ", "to", " ", "step", " ", "forward", " ", "from",
         " ", "each", " ", "coord", " ", "of", " ", "twople"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"iterate", "..."}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{
         "the", " ", "while", " ", "loop", " ", "has", " ", "this", " ", 
          "bound", " ", "because", " ", "once", " ", "we", " ", "calculate", 
          " ", "on", " ", "twople"}], "=", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"2", ",", "2"}], "}"}], " ", "with", " ", "dist"}], " ", 
          "=", " ", 
          RowBox[{"2", " ", 
           RowBox[{"(", 
            RowBox[{"aka", " ", "all", " ", "3", "x3", " ", "subsquare"}], 
            ")"}]}]}]}], ",", " ", 
        RowBox[{"the", " ", "method", " ", "is", " ", "complete"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "it", " ", "calls", " ", "the", " ", "inner", " ", "loops", " ", "for",
         " ", "progressively", " ", "smaller", " ", "subsquares", " ", 
        "until", " ", "every", " ", "space", " ", "has", " ", "been", " ", 
        "filled"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"tupVal", ">", "1"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "first", " ", "double", " ", "loop", " ", "to", " ", "loop", " ", 
          "over", " ", "x", " ", "and", " ", "y", " ", "values", " ", "to", 
          " ", "add", " ", "to", " ", "twople"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"can", "'"}], "t", " ", "combine", " ", "the", " ", "two", 
          " ", "loops", " ", "because", " ", "all", " ", "midSquare", " ", 
          "values", " ", "must", " ", "be", " ", "computed", " ", "before", 
          " ", "any", " ", "diamondAround", " ", "values", " ", "can", " ", 
          "be", " ", "calculated"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Do", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"arr", "=", 
              RowBox[{"midSquare", "[", 
               RowBox[{"arr", ",", "dim", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"twople", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "y"}], ",", 
                  RowBox[{
                   RowBox[{"twople", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "x"}]}], "}"}], ",", 
                RowBox[{"tupVal", "-", "1"}], ",", "jitter"}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"x", ",", "0", ",", 
               RowBox[{"dim", "-", 
                RowBox[{"twople", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ",", "count"}], "}"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"y", ",", "0", ",", 
             RowBox[{"dim", "-", 
              RowBox[{"twople", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", "count"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"second", " ", "double", " ", "loop"}], ",", " ", 
           RowBox[{
           "same", " ", "bounds", " ", "and", " ", "ragne", " ", "as", " ", 
            "the", " ", "previous"}], ",", " ", 
           RowBox[{
           "but", " ", "this", " ", "is", " ", "for", " ", 
            "diamondAround"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Do", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"arr", "=", 
              RowBox[{"diamondAround", "[", 
               RowBox[{"arr", ",", "dim", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"twople", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", "y"}], ",", 
                  RowBox[{
                   RowBox[{"twople", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "+", "x"}]}], "}"}], ",", 
                RowBox[{"tupVal", "-", "1"}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"x", ",", "0", ",", 
               RowBox[{"dim", "-", 
                RowBox[{"twople", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "-", "1"}], ",", "count"}], 
              "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"y", ",", "0", ",", 
             RowBox[{"dim", "-", 
              RowBox[{"twople", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", "count"}], 
            "}"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"increment", " ", "variables", " ", "properly"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"count", " ", "=", " ", 
          RowBox[{"tupVal", "-", "1"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"tupVal", "=", 
          RowBox[{"Floor", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"tupVal", "+", "1"}], ")"}], "/", "2"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"twople", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "=", "tupVal"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"twople", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "=", "tupVal"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "arr", "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.7319460560252247`*^9, 3.7319461135557046`*^9}, {
   3.7319462475594425`*^9, 3.7319463360921507`*^9}, {3.731946714615718*^9, 
   3.731946775620072*^9}, {3.7319488250309677`*^9, 3.731948826373309*^9}, {
   3.7321068611984015`*^9, 3.7321069421865835`*^9}, {3.73210697410708*^9, 
   3.7321069774375887`*^9}, {3.7321070134357386`*^9, 3.732107093528662*^9}, {
   3.732321450171126*^9, 3.7323215026656256`*^9}, {3.7323226894450674`*^9, 
   3.7323226898509245`*^9}, {3.7323265003287077`*^9, 
   3.7323265337752895`*^9}, {3.7323266002619543`*^9, 
   3.7323266063028407`*^9}, {3.732327730035319*^9, 3.732327853511408*^9}, {
   3.7323279202458353`*^9, 3.732327971580675*^9}, {3.732328023658947*^9, 
   3.732328040190591*^9}, {3.732328113227734*^9, 3.732328113919854*^9}, {
   3.732366131287185*^9, 3.7323661621584654`*^9}, {3.732366194755476*^9, 
   3.7323662011628304`*^9}, {3.7323662514116488`*^9, 3.732366268874829*^9}, {
   3.7323664877903013`*^9, 3.7323664946045675`*^9}, {3.732366561529455*^9, 
   3.732366562329968*^9}, {3.7323666144941406`*^9, 3.732366623267768*^9}, {
   3.7323667494928727`*^9, 3.732366764029755*^9}, {3.732366803453536*^9, 
   3.7323668078315797`*^9}, {3.7323668650350075`*^9, 
   3.7323668742568817`*^9}, {3.7323669545381985`*^9, 
   3.7323669604263544`*^9}, {3.7323672075447793`*^9, 3.732367235217752*^9}, {
   3.732367309366481*^9, 3.7323673124391603`*^9}, {3.732380703257242*^9, 
   3.732380780125123*^9}, {3.732381229240858*^9, 3.732381294237664*^9}, {
   3.732381492913498*^9, 3.73238154318487*^9}, {3.732381671532234*^9, 
   3.732381678512596*^9}, {3.732381714397422*^9, 3.7323817319382253`*^9}, {
   3.7323818047786345`*^9, 3.7323818312786627`*^9}, {3.732381864636665*^9, 
   3.732381906263405*^9}, {3.73238489299965*^9, 3.732384900793007*^9}, {
   3.732384932716919*^9, 3.732385024711282*^9}, {3.732385120663473*^9, 
   3.7323851209684534`*^9}, {3.7323851545868597`*^9, 
   3.7323851580065527`*^9}, {3.7323851969293756`*^9, 3.732385199341872*^9}, {
   3.7323852343839736`*^9, 3.7323852691505814`*^9}, {3.7323853165143394`*^9, 
   3.7323854257873917`*^9}, {3.732385692518052*^9, 3.7323857663857565`*^9}, {
   3.7323858729311438`*^9, 3.732385874381352*^9}, {3.7323859053216877`*^9, 
   3.732385951568038*^9}, {3.732385988070282*^9, 3.7323861343777666`*^9}, {
   3.732388057854825*^9, 3.7323880582466574`*^9}, {3.732397527129981*^9, 
   3.732397533936578*^9}, {3.7323980076406746`*^9, 3.7323980137618036`*^9}, {
   3.7323981003534346`*^9, 3.7323981437005916`*^9}, {3.7323982421108694`*^9, 
   3.7323982454927025`*^9}, {3.732398588049245*^9, 3.7323986058026915`*^9}, {
   3.7323989801641483`*^9, 3.7323990064910088`*^9}, {3.73239906416848*^9, 
   3.732399179497489*^9}, {3.7323992119382524`*^9, 3.732399232718546*^9}, {
   3.732399340065191*^9, 3.7323993974508357`*^9}, {3.732399441995038*^9, 
   3.732399508589429*^9}, {3.7323996574592085`*^9, 3.732399679538704*^9}, 
   3.732399733940817*^9, {3.732399774779104*^9, 3.732399796493734*^9}, {
   3.7323998351254387`*^9, 3.7323998685589056`*^9}, {3.732399939514583*^9, 
   3.732399979045637*^9}, {3.732400370327316*^9, 3.732400378106655*^9}, {
   3.732400513532295*^9, 3.7324005253972144`*^9}, {3.7324005620355864`*^9, 
   3.732400602582099*^9}, {3.732401659581724*^9, 3.7324016812107553`*^9}, {
   3.7324018140064573`*^9, 3.73240183153996*^9}, {3.7324019479443274`*^9, 
   3.7324019936197076`*^9}, {3.7324020453233852`*^9, 
   3.7324020767166667`*^9}, {3.7324021070255904`*^9, 
   3.7324021372246294`*^9}, {3.732402347817299*^9, 3.732402361951714*^9}, {
   3.732402424915241*^9, 3.732402471350662*^9}, {3.7324025040388813`*^9, 
   3.7324025074253597`*^9}, {3.7324025674304576`*^9, 
   3.7324026334706573`*^9}, {3.732402706385297*^9, 3.7324027524646826`*^9}, {
   3.7324027920687027`*^9, 3.7324028630737906`*^9}, {3.732402973976303*^9, 
   3.7324030717656355`*^9}, {3.73240315856482*^9, 3.7324033259112206`*^9}, {
   3.732403702852693*^9, 3.732403721241173*^9}, {3.7324039053953505`*^9, 
   3.7324039126733446`*^9}, {3.732404111788699*^9, 3.732404159855309*^9}, {
   3.7324041920534177`*^9, 3.7324042012216167`*^9}, {3.7324042542970695`*^9, 
   3.732404258032304*^9}, {3.7324055129427648`*^9, 3.7324055823235955`*^9}, {
   3.7324056524357214`*^9, 3.7324056525259705`*^9}, {3.7324056957088847`*^9, 
   3.7324057216147203`*^9}, {3.732405770117152*^9, 3.7324058063409686`*^9}, {
   3.7324060318810244`*^9, 3.732406035013732*^9}, 3.732406102609681*^9, {
   3.732406394204393*^9, 3.732406414612792*^9}, {3.732406917472153*^9, 
   3.7324069227433743`*^9}, {3.732406971757884*^9, 3.7324069753223133`*^9}, {
   3.732407139196723*^9, 3.7324071393313828`*^9}, {3.732407295791396*^9, 
   3.732407313082327*^9}, {3.732407344305481*^9, 3.7324073951009226`*^9}, {
   3.7324075407691793`*^9, 3.732407544577942*^9}, {3.732407632274758*^9, 
   3.7324076715920515`*^9}, {3.7324078127839437`*^9, 3.73240784155433*^9}, {
   3.7324079146244144`*^9, 3.7324079166634583`*^9}, {3.7324082347083244`*^9, 
   3.7324082464065247`*^9}, {3.7324083633563557`*^9, 3.732408467247325*^9}, {
   3.732408505355327*^9, 3.732408558060127*^9}, {3.7324086522330666`*^9, 
   3.7324087178507233`*^9}, {3.7324088050981607`*^9, 3.732408816662506*^9}, {
   3.732409263870861*^9, 3.732409272763262*^9}, {3.732409353353981*^9, 
   3.732409411549118*^9}, {3.732409452915324*^9, 3.7324095271956587`*^9}, {
   3.732409558494853*^9, 3.7324095605672956`*^9}, 3.7324095907413483`*^9, {
   3.7324096270568857`*^9, 3.7324097457361956`*^9}, {3.732409872542899*^9, 
   3.7324099002065477`*^9}, {3.732410141746324*^9, 3.7324102164223657`*^9}, {
   3.7324102918642273`*^9, 3.732410310308878*^9}, {3.7324103822398973`*^9, 
   3.7324103968214245`*^9}, {3.7324104421020327`*^9, 3.7324104446141863`*^9}, 
   3.732410543414782*^9, {3.732414078069617*^9, 3.73241418089954*^9}, {
   3.732414257048233*^9, 3.7324142612463703`*^9}, {3.732414346119288*^9, 
   3.7324144133559036`*^9}, {3.732414480728571*^9, 3.7324144835003242`*^9}, {
   3.7324145220876975`*^9, 3.7324145259463944`*^9}, {3.7324145612816973`*^9, 
   3.732414615731682*^9}, {3.732414667713623*^9, 3.732414783208949*^9}, {
   3.7324148513992605`*^9, 3.73241485343965*^9}, {3.732414885571085*^9, 
   3.73241492088628*^9}, {3.73241518075006*^9, 3.732415190893301*^9}, {
   3.7324152940373125`*^9, 3.7324153023590717`*^9}, {3.7324153666440415`*^9, 
   3.7324154027101545`*^9}, {3.7324154825119114`*^9, 
   3.7324155601346846`*^9}, {3.7324156183258576`*^9, 
   3.7324157003735447`*^9}, {3.7324158992830143`*^9, 
   3.7324158993183784`*^9}, {3.73245047807404*^9, 3.7324505196058245`*^9}, {
   3.732450574890676*^9, 3.7324506640457582`*^9}, {3.732450702843743*^9, 
   3.732450874817107*^9}, {3.7324509819173574`*^9, 3.732450989441425*^9}, {
   3.7324510261418486`*^9, 3.7324511092112823`*^9}, {3.7324533692499886`*^9, 
   3.732453380736063*^9}, {3.7324641214465017`*^9, 3.7324641383095393`*^9}},
 CellLabel->
  "In[178]:=",ExpressionUUID->"77a8fcc6-78d7-4de7-b873-5f903660cc8c"],

Cell["\<\
Test to make sure that the method fills every possible point.\
\>", "Text",
 CellChangeTimes->{{3.732450882576188*^9, 
  3.7324508911985245`*^9}},ExpressionUUID->"93fdebfb-f39c-40e8-89ee-\
7bf67589bd8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"diamondSqure", "[", "3", "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[179]:=",ExpressionUUID->"befcf5a1-1f78-4003-9b18-56f234f4af41"]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Use it", "Subchapter",
 CellChangeTimes->{{3.732321851438589*^9, 
  3.7323218518919497`*^9}},ExpressionUUID->"a50e3c6f-beae-4c29-968d-\
0c741774d730"],

Cell[CellGroupData[{

Cell["Methods", "Section",
 CellChangeTimes->{{3.732458180441704*^9, 3.7324581822023306`*^9}, {
  3.7324697971733093`*^9, 
  3.732469798241518*^9}},ExpressionUUID->"bf1db357-18b3-460a-9efe-\
3cc3cb50e09e"],

Cell[CellGroupData[{

Cell["Diamond Square", "Subsection",
 CellChangeTimes->{{3.732469801996585*^9, 
  3.7324698065034523`*^9}},ExpressionUUID->"7f982f33-b84e-4dfb-91b4-\
179b31ebfbe7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"val", "=", "5"}], ";", 
  RowBox[{"(*", 
   RowBox[{"size", " ", "of", " ", "output", " ", "array"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"dim", " ", "=", " ", 
   RowBox[{
    SuperscriptBox["2", "val"], "+", "1"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arr", "=", 
   RowBox[{"makeArr", "[", "dim", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toDraw", "=", 
   RowBox[{"diamondSqure", "[", 
    RowBox[{"val", ",", ".25"}], "]"}]}], ";", 
  RowBox[{"(*", 
   RowBox[{
   "change", " ", "the", " ", "second", " ", "arg", " ", "to", " ", "adjust", 
    " ", 
    RowBox[{"jitter", ".", " ", "vals"}], " ", "between", " ", "0", " ", 
    "and", " ", "1", " ", "are", " ", "best"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"toDraw", "//", "MatrixForm"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toDraw", "=", 
   RowBox[{"assignArr", "[", 
    RowBox[{"arr", ",", "toDraw", ",", "dim"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"plotHeatMap", "[", "toDraw", "]"}]}], "Input",
 CellChangeTimes->{{3.731939293820467*^9, 3.731939339436881*^9}, {
   3.731939570979784*^9, 3.731939670831276*^9}, {3.731939703089405*^9, 
   3.7319397402652736`*^9}, {3.7319428672177978`*^9, 3.731942868152561*^9}, {
   3.731943000362365*^9, 3.7319430436419563`*^9}, {3.7319451029791603`*^9, 
   3.731945120663396*^9}, {3.731945665979184*^9, 3.73194566669268*^9}, 
   3.7319458126368318`*^9, {3.7319458960423183`*^9, 3.7319459162460337`*^9}, 
   3.7319462457160025`*^9, 3.731948852202357*^9, {3.732106858264851*^9, 
   3.7321069077992296`*^9}, {3.7323215198386574`*^9, 3.732321570696204*^9}, {
   3.7323216836142035`*^9, 3.732321713430512*^9}, {3.732322001476843*^9, 
   3.7323220113979864`*^9}, {3.732322058267845*^9, 3.732322061020624*^9}, {
   3.7323818351775923`*^9, 3.7323818352551537`*^9}, {3.73238252903267*^9, 
   3.7323825635615034`*^9}, {3.7323976447773714`*^9, 
   3.7323976780510607`*^9}, {3.732398181959659*^9, 3.73239820817738*^9}, {
   3.732400540828682*^9, 3.732400548089754*^9}, {3.73241572614283*^9, 
   3.7324157298598256`*^9}, {3.732415764188471*^9, 3.7324157663862314`*^9}, {
   3.7324158741312566`*^9, 3.7324158890941343`*^9}, {3.7324159232967715`*^9, 
   3.7324159262421694`*^9}, {3.7324160195855885`*^9, 
   3.7324160317278085`*^9}, {3.7324160730834923`*^9, 
   3.7324160781691246`*^9}, {3.732416171667287*^9, 3.732416222146243*^9}, {
   3.7324162969698553`*^9, 3.7324163406480026`*^9}, {3.732416389223091*^9, 
   3.7324163893863*^9}, {3.7324164461104603`*^9, 3.7324164653504333`*^9}, {
   3.7324165333099546`*^9, 3.7324165337419553`*^9}, {3.732448701624436*^9, 
   3.7324487033360753`*^9}, {3.732450093822405*^9, 3.7324501405580587`*^9}, {
   3.7324509022911253`*^9, 3.7324509249027433`*^9}, {3.732451216030902*^9, 
   3.7324512442372093`*^9}, {3.732451668282136*^9, 3.732451729246298*^9}, {
   3.732451887736162*^9, 3.732451892940926*^9}, {3.732458696046069*^9, 
   3.732458696108573*^9}, {3.732464074720076*^9, 3.7324640806234417`*^9}, {
   3.7324642552212396`*^9, 3.7324642826765823`*^9}, {3.7324664032333813`*^9, 
   3.732466412924452*^9}, {3.732469942932294*^9, 3.7324699437800207`*^9}, {
   3.732470702197133*^9, 3.732470737812135*^9}, {3.732470770983779*^9, 
   3.7324708049766426`*^9}},
 CellLabel->
  "In[180]:=",ExpressionUUID->"52dacc23-e583-4714-8f63-184890f7f151"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Midpoint", "Subsection",
 CellChangeTimes->{{3.732458185284252*^9, 
  3.7324581860426598`*^9}},ExpressionUUID->"72395819-6ce5-4d10-be2b-\
6ce461de9214"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"val", "=", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"dim", " ", "=", " ", 
  RowBox[{
   SuperscriptBox["2", "val"], "+", "1"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arr", "=", 
   RowBox[{"makeArr", "[", "dim", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toDraw", "=", 
   RowBox[{"midPoint", "[", 
    RowBox[{"val", ",", ".25"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toDraw", "//", "MatrixForm"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toDraw", "=", 
   RowBox[{"assignArr", "[", 
    RowBox[{"arr", ",", "toDraw", ",", "dim"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"plotHeatMap", "[", "toDraw", "]"}]}], "Input",
 CellChangeTimes->{{3.7324572800663147`*^9, 3.732457293957195*^9}, {
  3.7324573537098436`*^9, 3.7324573537770433`*^9}, {3.732457797264429*^9, 
  3.7324578286190352`*^9}, {3.7324581911680846`*^9, 3.7324582665389194`*^9}, {
  3.732470792857757*^9, 3.7324708239796596`*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"4b93aa71-8b45-4fab-9677-372894c24698"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusions", "Subsection",
 CellChangeTimes->{{3.7324698193086843`*^9, 
  3.7324698204860263`*^9}},ExpressionUUID->"70d384e2-2a98-4029-86f3-\
337a540ea43f"],

Cell["\<\
As can be easily seen, these are much nicer than the original random \
assignment, because points affect their neighbors to create a nice structure, \
which some random jitter. Try messing with the jitter variable to see \
different results\
\>", "Text",
 CellChangeTimes->{{3.732469822406145*^9, 3.732469864460128*^9}, {
  3.732469949931328*^9, 3.732469951424014*^9}, {3.73247048043052*^9, 
  3.732470489235732*^9}},ExpressionUUID->"f2ec9938-5a30-4d2e-ac62-\
a935e53225f2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Timing", "Section",
 CellChangeTimes->{{3.732464723707308*^9, 
  3.7324647242340636`*^9}},ExpressionUUID->"f64b5c69-2c48-4e18-830d-\
f9e8d762ae18"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"midpointTiming", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"diamondSquareTiming", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Do", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"AppendTo", "[", 
     RowBox[{"midpointTiming", ",", 
      RowBox[{
       RowBox[{"AbsoluteTiming", "[", 
        RowBox[{"midPoint", "[", 
         RowBox[{"n", ",", ".25"}], "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"diamondSquareTiming", ",", 
      RowBox[{
       RowBox[{"AbsoluteTiming", "[", 
        RowBox[{"diamondSqure", "[", 
         RowBox[{"n", ",", ".25"}], "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "8"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"midpointTiming", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"{", 
   RowBox[{"midpointTiming", ",", "diamondSquareTiming"}], "}"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.73246429814007*^9, 3.7324644147300277`*^9}, {
  3.73246444710662*^9, 3.73246445129749*^9}, {3.732464578259654*^9, 
  3.732464666075409*^9}},
 CellLabel->
  "In[192]:=",ExpressionUUID->"8c17422c-3bc1-4a9b-ab9d-918a46f822b1"],

Cell[BoxData["diamondSquareTiming"], "Input",
 CellChangeTimes->{{3.732464653437645*^9, 3.7324646565317745`*^9}},
 CellLabel->
  "In[197]:=",ExpressionUUID->"63dde9ab-9170-4737-a49a-ecafff3dbfc2"],

Cell["\<\
In the end, the diamondSquare method is slower, but generates \
\[OpenCurlyDoubleQuote]better\[CloseCurlyDoubleQuote] terrain. However, in \
our currently implementation both appear to take exponential time, so super \
large plots are not very feasible.\
\>", "Text",
 CellChangeTimes->{{3.732470607295543*^9, 
  3.732470640412798*^9}},ExpressionUUID->"2b22dfb4-77c2-47e4-a386-\
1e5114b96759"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 976},
WindowMargins->{{-9, Automatic}, {Automatic, -9}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 167, 3, 121, "Title",ExpressionUUID->"224853a0-4541-4eda-9a5b-f1c358e6cffc"],
Cell[CellGroupData[{
Cell[772, 29, 277, 10, 86, "Chapter",ExpressionUUID->"7267da42-e11f-4f77-a95a-daa8c637c05e"],
Cell[1052, 41, 664, 12, 99, "Text",ExpressionUUID->"228ea285-b020-471f-9a7d-c6d246c021a6"],
Cell[CellGroupData[{
Cell[1741, 57, 168, 3, 79, "Subchapter",ExpressionUUID->"a99f2c9c-77cc-4a2d-9621-67af8c3fd28f"],
Cell[CellGroupData[{
Cell[1934, 64, 207, 4, 83, "Section",ExpressionUUID->"60ae7b15-ffec-46a8-a1a6-c53779f3347a"],
Cell[2144, 70, 479, 9, 162, "Text",ExpressionUUID->"b7fd5983-c530-4b85-8565-32b350250718"],
Cell[2626, 81, 1766, 44, 959, "Input",ExpressionUUID->"148bc9b2-2d4a-4d3e-a6a8-fc5667cfa120"],
Cell[4395, 127, 744, 13, 318, "Input",ExpressionUUID->"ac4b6677-c113-4a0a-b2f1-0f4aa90781a7"],
Cell[5142, 142, 512, 10, 374, "Text",ExpressionUUID->"9ea539f0-395d-4ba5-aa19-123d7614b230"],
Cell[5657, 154, 1049, 28, 685, "Input",ExpressionUUID->"2b48b734-0c91-4dec-9f0a-08db543f9b7b"]
}, Closed]],
Cell[CellGroupData[{
Cell[6743, 187, 162, 3, 64, "Section",ExpressionUUID->"742c578a-83c2-4fbd-9f18-3397419bdd2e"],
Cell[6908, 192, 392, 8, 43, "Text",ExpressionUUID->"f2d35d65-a340-473e-bb11-f86fbbcd6b34"],
Cell[7303, 202, 1045, 24, 85, "Input",ExpressionUUID->"b0555e69-158f-4866-8b8f-14244ec7277d"],
Cell[8351, 228, 236, 6, 43, "Text",ExpressionUUID->"72b9ebdc-7326-4f93-bef6-da9f550e4b7c"],
Cell[8590, 236, 1028, 19, 109, "Input",ExpressionUUID->"ea723824-e8a6-4e79-8c1c-43f4ccb7301f"],
Cell[9621, 257, 810, 13, 99, "Text",ExpressionUUID->"1aceba19-54ed-467f-bf0e-a93f4cfc9e39"],
Cell[10434, 272, 627, 14, 85, "Input",ExpressionUUID->"5fd48cc1-3aed-4b4d-aaa6-2fc79fc782d3"],
Cell[11064, 288, 242, 6, 43, "Text",ExpressionUUID->"56754db9-0725-44d7-9daf-18f5c2683671"]
}, Closed]],
Cell[CellGroupData[{
Cell[11343, 299, 159, 3, 64, "Section",ExpressionUUID->"870215ed-6ecc-4627-b13d-d1a6f1c7b1d9"],
Cell[11505, 304, 294, 6, 395, "Text",ExpressionUUID->"4b313817-256a-454b-973e-a2c62bf20556"],
Cell[11802, 312, 1453, 36, 2565, "Input",ExpressionUUID->"d963feb1-45c8-4a50-9b54-ec758efabcd4"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13304, 354, 164, 3, 79, "Subchapter",ExpressionUUID->"55544234-8e20-45c3-aafa-f0bb8235e8ae"],
Cell[CellGroupData[{
Cell[13493, 361, 162, 3, 83, "Section",ExpressionUUID->"b0225c5e-3e81-4c61-b035-1b6e2b8b29c4"],
Cell[13658, 366, 600, 14, 71, "Text",ExpressionUUID->"4933274d-86a5-4777-be5b-ba518f76bd74"],
Cell[14261, 382, 258, 6, 43, "Text",ExpressionUUID->"c868e786-d8be-46d3-b1f3-b11cf2db9b4c"],
Cell[CellGroupData[{
Cell[14544, 392, 164, 3, 67, "Subsection",ExpressionUUID->"0e29fea8-9df7-40f8-ab3d-37f3cdc048d5"],
Cell[14711, 397, 86048, 1430, 1718, "Text",ExpressionUUID->"18440716-7418-406d-90a5-d4d83579a23c"],
Cell[100762, 1829, 171, 3, 43, "Text",ExpressionUUID->"1f7f92ad-3fdf-417d-8634-6fc7aebaaf9a"]
}, Closed]],
Cell[CellGroupData[{
Cell[100970, 1837, 214, 4, 46, "Subsection",ExpressionUUID->"abacdf1c-2d35-4f9b-9f1d-fd1d8adcb745"],
Cell[101187, 1843, 503, 11, 99, "Text",ExpressionUUID->"b38bf963-b0f2-4cec-aca0-f4a2fc543601"],
Cell[101693, 1856, 19994, 494, 1499, "Input",ExpressionUUID->"04040351-524b-4c63-8a1d-3ce8a5f60748"],
Cell[121690, 2352, 1091, 31, 165, "Input",ExpressionUUID->"f4cc69ab-a56f-4ae8-92ec-15adc4a3dba7"],
Cell[122784, 2385, 349, 7, 59, "Text",ExpressionUUID->"6c92e9e5-b249-4c16-b8bd-db20c8c61888"],
Cell[123136, 2394, 937, 26, 165, "Input",ExpressionUUID->"92c5fc52-7e6a-4992-9a2c-e0ce84704165"],
Cell[124076, 2422, 365, 7, 59, "Text",ExpressionUUID->"2ba88b10-3e32-437e-85f7-f41eab0c7743"],
Cell[124444, 2431, 144, 3, 59, "Text",ExpressionUUID->"8d717df9-6ba8-4acc-bb7c-04dfa5a74970"]
}, Closed]],
Cell[CellGroupData[{
Cell[124625, 2439, 156, 3, 46, "Subsection",ExpressionUUID->"e259b720-b361-4957-986f-7573bd5ec2b2"],
Cell[124784, 2444, 284, 8, 154, "Text",ExpressionUUID->"dad2a8dd-2a85-48b5-968d-f4089e970341"],
Cell[125071, 2454, 3751, 98, 356, "Input",ExpressionUUID->"3fdf8718-e7df-40e5-9484-532871d8a02f"]
}, Closed]],
Cell[CellGroupData[{
Cell[128859, 2557, 158, 3, 46, "Subsection",ExpressionUUID->"ec0efaea-94e9-4441-87ab-699e0d798be8"],
Cell[129020, 2562, 241, 6, 71, "Text",ExpressionUUID->"0f91288e-44f6-4e57-9ef1-6bec3171366f"],
Cell[129264, 2570, 3311, 84, 254, "Input",ExpressionUUID->"ff818274-a67c-4fb8-baec-f34e57139ba6"]
}, Closed]],
Cell[CellGroupData[{
Cell[132612, 2659, 156, 3, 46, "Subsection",ExpressionUUID->"7e6198b9-8c8a-4042-9309-6cbaaf254e5d"],
Cell[132771, 2664, 1140, 23, 501, "Text",ExpressionUUID->"af01771f-bf75-4440-92b2-0269b7d472c7"],
Cell[133914, 2689, 6639, 155, 1256, "Input",ExpressionUUID->"09939f95-cc72-44b3-bd61-94bbe6823e37"]
}, Closed]],
Cell[CellGroupData[{
Cell[140590, 2849, 158, 3, 46, "Subsection",ExpressionUUID->"00b29450-d1af-40e5-b333-7633d5b31bdb"],
Cell[140751, 2854, 441, 9, 198, "Text",ExpressionUUID->"8ddac00b-addb-4b06-9f6b-c7924c21e544"],
Cell[141195, 2865, 3800, 86, 632, "Input",ExpressionUUID->"a6d4e158-459f-4537-9890-b613af2c7a35"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[145044, 2957, 170, 3, 64, "Section",ExpressionUUID->"82a7b5c8-3c9c-48a1-a653-9ef6a26fdd40"],
Cell[CellGroupData[{
Cell[145239, 2964, 162, 3, 67, "Subsection",ExpressionUUID->"70f0dd1b-25d2-4033-95c0-5ce6dba95b22"],
Cell[145404, 2969, 803, 13, 110, "Text",ExpressionUUID->"862cb1d1-2a95-4d68-9afa-daa43411514c"],
Cell[146210, 2984, 62773, 1034, 543, "Input",ExpressionUUID->"df1abc32-fc5b-4b30-a8c3-9104133763c2"],
Cell[208986, 4020, 875, 14, 309, "Text",ExpressionUUID->"c5ebf07d-e58b-4e50-a9ec-ca342504eb3b"]
}, Closed]],
Cell[CellGroupData[{
Cell[209898, 4039, 160, 3, 46, "Subsection",ExpressionUUID->"6776de65-77a8-490b-aeed-4f225ac46270"],
Cell[210061, 4044, 1072, 20, 371, "Text",ExpressionUUID->"896a56db-2d26-44c2-a635-dc2386090d0e"],
Cell[211136, 4066, 3916, 101, 318, "Input",ExpressionUUID->"3d14cdcd-deb8-4a49-8dd7-1ec10dbc46cc"]
}, Closed]],
Cell[CellGroupData[{
Cell[215089, 4172, 163, 3, 46, "Subsection",ExpressionUUID->"0647b9c7-e21f-468f-8f70-19e393f72ed1"],
Cell[215255, 4177, 829, 15, 198, "Text",ExpressionUUID->"abcc9aa7-06f2-4310-8834-bd7c2860868b"],
Cell[216087, 4194, 5571, 140, 843, "Input",ExpressionUUID->"5c0ecff8-e630-497c-b12b-62e6d714d1e0"]
}, Closed]],
Cell[CellGroupData[{
Cell[221695, 4339, 164, 3, 46, "Subsection",ExpressionUUID->"133ffd88-e695-4ae4-9370-3dfc30d47dc3"],
Cell[221862, 4344, 352, 8, 267, "Text",ExpressionUUID->"29ea162f-17fa-4bef-a47d-e1e120bc9dd5"],
Cell[222217, 4354, 2833, 68, 1051, "Input",ExpressionUUID->"1edba521-fe74-49b9-bdd6-c27df815d2ad"]
}, Closed]],
Cell[CellGroupData[{
Cell[225087, 4427, 161, 3, 46, "Subsection",ExpressionUUID->"157901e1-9339-455e-a0f1-cdf928f3c45c"],
Cell[225251, 4432, 902, 22, 240, "Text",ExpressionUUID->"4bf185af-1219-4c1d-baeb-b5809aaaafec"],
Cell[226156, 4456, 16726, 330, 2801, "Input",ExpressionUUID->"77a8fcc6-78d7-4de7-b873-5f903660cc8c"],
Cell[242885, 4788, 213, 5, 104, "Text",ExpressionUUID->"93fdebfb-f39c-40e8-89ee-7bf67589bd8f"],
Cell[243101, 4795, 181, 4, 84, "Input",ExpressionUUID->"befcf5a1-1f78-4003-9b18-56f234f4af41"]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[243343, 4806, 156, 3, 79, "Subchapter",ExpressionUUID->"a50e3c6f-beae-4c29-968d-0c741774d730"],
Cell[CellGroupData[{
Cell[243524, 4813, 205, 4, 83, "Section",ExpressionUUID->"bf1db357-18b3-460a-9efe-3cc3cb50e09e"],
Cell[CellGroupData[{
Cell[243754, 4821, 164, 3, 67, "Subsection",ExpressionUUID->"7f982f33-b84e-4dfb-91b4-179b31ebfbe7"],
Cell[243921, 4826, 3375, 61, 180, "Input",ExpressionUUID->"52dacc23-e583-4714-8f63-184890f7f151"]
}, Open  ]],
Cell[CellGroupData[{
Cell[247333, 4892, 158, 3, 67, "Subsection",ExpressionUUID->"72395819-6ce5-4d10-be2b-6ce461de9214"],
Cell[247494, 4897, 1094, 26, 180, "Input",ExpressionUUID->"4b93aa71-8b45-4fab-9677-372894c24698"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248625, 4928, 163, 3, 67, "Subsection",ExpressionUUID->"70d384e2-2a98-4029-86f3-337a540ea43f"],
Cell[248791, 4933, 484, 9, 71, "Text",ExpressionUUID->"f2ec9938-5a30-4d2e-ac62-a935e53225f2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[249324, 4948, 153, 3, 83, "Section",ExpressionUUID->"f64b5c69-2c48-4e18-830d-f9e8d762ae18"],
Cell[249480, 4953, 1447, 36, 252, "Input",ExpressionUUID->"8c17422c-3bc1-4a9b-ab9d-918a46f822b1"],
Cell[250930, 4991, 196, 3, 35, "Input",ExpressionUUID->"63dde9ab-9170-4737-a49a-ecafff3dbfc2"],
Cell[251129, 4996, 403, 8, 43, "Text",ExpressionUUID->"2b22dfb4-77c2-47e4-a386-1e5114b96759"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

